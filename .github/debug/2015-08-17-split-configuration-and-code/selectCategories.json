{
  "request": {
    "output": {
      "type": "array",
      "schema": {
        "type": "array",
        "items": {
          "type": "object",
          "required": [
            "name",
            "relevance"
          ],
          "properties": {
            "name": {
              "type": "string"
            },
            "relevance": {
              "type": "number"
            },
            "reasoning": {
              "type": "string"
            }
          }
        }
      }
    },
    "prompt": "\nDu bist ein technischer News-Kategorisierungsassistent mit Fachkenntnissen in IT, Künstlicher Intelligenz, Programmierung, Datenbanken, Arbeitswelt und rechtlichen Themen.\nDeine Aufgabe ist es, einen gegebenen Newstext den passenden Kategorien zuzuordnen und für jede Kategorie eine Relevanz zwischen 1 (nur für Spezialinteressierte) und 10 (bahnbrechend, für alle relevant) zu vergeben.\n\nDie Kategorien werden dir als Markdown-Liste vorgegeben.\nGehe folgendermaßen vor:\n1. Analysiere den Newstext.\n2. Wähle alle passenden Kategorien.\n3. Vergib für jede gewählte Kategorie eine Relevanz von 1 bis 10 und begründe deine Einstufung in einem Satz.\n\nHier ist die Kategorien-Liste:\n- ai\n- programming\n- databases\n- security\n- work\n- data protection\n- copyright\n\nHier ist der Newstext:\n# Split configuration and code\n\n\r\nApplications needs configuration depends on the environment, e.g. the credentials of a database. Lets have a look at different approaches solving this requirement, their pros and cons.\r\n\r\n<!--more-->\r\n\r\n## All Configuration files in the repository\r\n\r\n```\r\n/configs\r\n  default.json\r\n  dev.json\r\n  stage.json\r\n  prod.json\r\n```\r\n\r\nIn this approach we define an application configuration file `default.json`, which will be always used, and one for every environment `dev.json`, `stage.json` and `prod.json`, which will be only used in the actual environment.\r\n\r\nPros:\r\n\r\n* Easier to installing multiple times the same environment and ensure the consistence\r\n* Code changes and new needed configuration can be done in the same step\r\n* Version control give the overview about configuration changes\r\n\r\nCons:\r\n\r\n* Have access to the code means have access to all configuration, also the critical ones like database credentials\r\n* Add or modify environment configuration need changes in the repository and new code deploy\r\n\r\n## Write configuration file during deploy\r\n\r\n```\r\n/configs\r\n  default.json\r\n  env.json\r\n```\r\n\r\nIn this approach we define an application configuration file `default.json`. During the deploy we create another configuration file `env.json` which is filled by the actual environment configuration.\r\n\r\nPros:\r\n\r\n* The repository doesn’t care about the different environments\r\n* Having only access to the code doesn't result in having access to the critical configuration\r\n\r\nCons:\r\n\r\n* Deploy needs to care about create the `env.json` file\r\n* There must be a separated history available about the changes of the environment configuration\r\n\r\n## Use environment variables\r\n\r\n```\r\nprocess.env in JavaScript\r\ngetenv() in PHP\r\n```\r\n\r\nThey are a common way to give an application variables from the environment. In Node.js they can be set by the CLI command starting the application. In PHP they can be set by `php.ini`, vhost or `.htaccess`.\r\n\r\nThe large pros comes with the support by the hosting service. Heroku offers a web UI to set/modify the environment variables, show a history of all changes and allow to revert them.\r\n\r\nPros:\r\n\r\n* Its a common way for all languages and supported by all cloud providers\r\n* Environment configuration is separated from the code and can easily changed\r\n* Changes are tracked and revertable\r\n* Its possible to create new apps with another environment configuration without code changes\r\n* Access to the code and access to the environments can separately given\r\n\r\n## Summary\r\n\r\nUse environment variables is the most flexible, secure and maintainable approach, but needs some support if the tracking and reverting is needed.\r\n\n    ",
    "timestamp": "2025-07-04T13:46:21.772Z"
  },
  "response": {
    "data": {
      "result": [
        {
          "role": "assistant",
          "content": [
            {
              "type": "tool-call",
              "toolCallId": "tooluse_dWzsn5DyS-ei8iJNjUW1MQ",
              "toolName": "web_search",
              "args": {
                "query": "application configuration management environment variables best practices 2024"
              }
            }
          ],
          "id": "46315038-07f0-40df-a008-f4f5a4b8dbee"
        },
        {
          "role": "tool",
          "id": "30ae484b-62d0-48a3-9635-26b7acb300c2",
          "content": [
            {
              "type": "tool-result",
              "toolCallId": "tooluse_dWzsn5DyS-ei8iJNjUW1MQ",
              "toolName": "web_search",
              "result": {
                "input": "application configuration management environment variables best practices 2024",
                "output": [
                  {
                    "title": "Securely Managing Environment Variables: Best Practices",
                    "url": "https://infinitejs.com/posts/securely-managing-env-variables-best-practices/",
                    "type": "website-preview",
                    "text": "Properly managing environment variables is crucial for both security and flexibility in any application. By adhering to these best practices, you will mitigate the exposures of sensitive information and improve the overall configuration management of your projects.. \n\n[\n\nInfiniteJS\n\n](/)\n\n*   [Home](/)\n*   [Newsletter](#newsletter)\n\nSecurely Managing Environment Variables: Best Practices\n=======================================================\n\npublished at November 18, 2024\n\nOptimization\n\nBest Practices\n\nGuide\n\nAuthentication\n\nUnlock the secret to securing your app's sensitive data! Discover proven strategies for managing environment variables safely and effectively.\n\nSecurely Managing Environment Variables: Best Practices\n=======================================================\n\nManaging environmental variables is a crucial aspect of modern web development and deployment. They help keep sensitive configuration settings like API keys, database credentials, and third-party service identifiers hidden from your codebase. In this article, we will explore best practices for securely managing environment variables, both in local development environments and production.\n\nUnderstanding Environment Variables\n-----------------------------------\n\nEnvironment variables are dynamic values that affect the processes running on a computer. They provide a convenient way for applications to access configuration settings without hardcoding them into the codebase. This is particularly important for:\n\n*   Security: Prevents sensitive data from being exposed in repositories.\n*   Flexibility: Allows different settings in development, testing, and production environments.\n\n### Common Use Cases\n\n*   Storing database credentials\n*   API keys for third-party services\n*   Configuration for different deployment environments (development, staging, production)\n\nBest Practices for Managing Environment Variables\n-------------------------------------------------\n\nHere's a detailed guide on securely managing environment variables using various frameworks and tools.\n\n### 1\\. Use a .env File\n\nIn local development environments, a common practice is to use a `.env` file to store environment variables. This file is usually located at the root of your project.\n\n#### Example .env File Structure\n\n    # .env\n    DATABASE_URL=postgres://username:password@localhost:5432/mydatabase\n    API_KEY=your_api_key_here\n    JWT_SECRET=some_secret_key\n    \n\n#### .env File Management\n\n*   **Ignore the .env File**: Ensure that your `.env` file is added to your `.gitignore` file to prevent it from being committed to your version control system.\n\n    # .gitignore\n    .env\n    \n\n### 2\\. Loading Environment Variables\n\nMost programming languages and frameworks have libraries to load environment variables from a `.env` file. For Node.js, you can use the `dotenv` package.\n\n#### Installing dotenv\n\n    npm install dotenv\n    \n\n#### Loading Environment Variables\n\n    // index.js or app.js\n    require('dotenv').config();\n    \n    const dbUrl = process.env.DATABASE_URL; // Use the environment variable\n    console.log('Database URL:', dbUrl);\n    \n\n### 3\\. Environment Variable Management in Production\n\nWhen deploying an application, avoid using a `.env` file. Instead, use the secret management features provided by your cloud service provider or orchestrator tools. Here are a few options:\n\n*   **AWS Parameter Store**\n*   **Azure Key Vault**\n*   **Google Cloud Secret Manager**\n\n#### Example: AWS Parameter Store\n\nYou can set environment variables in AWS Parameter Store and access them in your application.\n\n    # Store parameters in AWS\n    aws ssm put-parameter --name \"DATABASE_URL\" --value \"your_database_url\" --type \"String\"\n    \n\nTo retrieve the parameters in your application:\n\n    const AWS = require('aws-sdk');\n    const ssm = new AWS.SSM();\n    \n    async function getEnvVar() {\n      const data = await ssm.getParameter({ Name: 'DATABASE_URL', WithDecryption: true }).promise();\n      return data.Parameter.Value;\n    }\n    \n    getEnvVar().then(value => console.log('Database URL:', value));\n    \n\n### 4\\. Validate Environment Variables\n\nIt is essential to validate the presence and format of required environment variables in your application, ideally during the application bootstrapping process.\n\n#### Example Validation\n\n    function validateEnv() {\n      if (!process.env.DATABASE_URL) {\n        throw new Error('Missing DATABASE_URL environment variable');\n      }\n      if (!process.env.API_KEY) {\n        throw new Error('Missing API_KEY environment variable');\n      }\n    }\n    \n    validateEnv();\n    \n\n### 5\\. Use Environment-Specific Configuration\n\nDifferent environments often require different configurations. Use environment-specific variables to manage settings for development, testing, and production.\n\n#### Example: Node.js Configuration\n\nYou can set an `NODE_ENV` variable to differentiate between environments:\n\n    // In the .env file\n    NODE_ENV=development\n    \n\n    cons",
                    "idx": "2-0"
                  },
                  {
                    "title": "The Complete Guide to Environment Variables: Security ... - Medium",
                    "url": "https://medium.com/@jinvishal2011/the-complete-guide-to-environment-variables-security-implementation-and-best-practices-8a5202afeca1",
                    "type": "website-preview",
                    "text": "Environment variables are a crucial aspect of containerization and cloud-native applications. They provide a way to pass configuration data and sensitive information to applications without.... Autor: Vishal Acharya",
                    "idx": "2-1"
                  },
                  {
                    "title": "Best Practices for Environment-Specific Configurations",
                    "url": "https://onenine.com/best-practices-for-environment-specific-configurations/",
                    "type": "website-preview",
                    "text": "Organize with Config Files: Use .env files for different environments (e.g., .env.development, .env.production) and document required variables with a .env.example file. Validate Configurations: Use tools like zod or envalid to catch errors early and ensure robust setups.. \n\n×\n\n### Let's add your touch to this website.\n\nWhat's your favorite color?\n---------------------------\n\n Blue\n\n Purple\n\n Orange\n\n Green\n\n Black & White\n\n Rainbow\n\n[Skip to content](#primary)\n\n[](https://onenine.com)\n\n[](https://onenine.com)\n\n*   [Web Design](https://onenine.com/website-design/)\n*   [Web Management](https://onenine.com/web-management/)\n*   [Dashboard](https://onenine.com/dashboard/)\n*   [Visual Branding](https://onenine.com/visual-branding/)\n*   [Blog](https://onenine.com/blog/)\n\n*   [Book Consult](javascript:;)\n*   [Sign In](https://my.onenine.com/)\n\n*   Pick a Color\n\n[](https://onenine.com)\n\nMenu\n\n[Back to Blog](/blog)\n\nBest Practices for Environment-Specific Configurations\n======================================================\n\nJanuary 18, 2025 / January 19, 2025\n\n8 minutes 48 seconds\n\nConfiguring applications for different environments like development, staging, and production is critical for security, scalability, and consistency. Here’s how you can manage configurations effectively:\n\n*   **Use Environment Variables**: Store sensitive data like API keys or database credentials securely outside your codebase.\n*   **Organize with Config Files**: Use `.env` files for different environments (e.g., `.env.development`, `.env.production`) and document required variables with a `.env.example` file.\n*   **Validate Configurations**: Use tools like `zod` or `envalid` to catch errors early and ensure robust setups.\n*   **Avoid Hard-Coding**: Keep environment-specific details out of your code to make maintenance easier and deployments smoother.\n*   **Secure Configurations**: Store sensitive data in tools like [AWS KMS](https://docs.aws.amazon.com/kms/) or [HashiCorp Vault](https://www.hashicorp.com/products/vault), and limit access with strict security measures.\n\n### Quick Comparison\n\nMethod\n\nPros\n\nCons\n\nBest For\n\n**Environment Variables**\n\nSecure, scalable, easy to update\n\nRequires validation, access control\n\nProduction, CI/CD\n\n**Config Files (.env)**\n\nVersion-controlled, team-friendly\n\nNeeds encryption, ongoing maintenance\n\nLocal development, teams\n\n**Hard-Coded Config**\n\nQuick setup, simple for testing\n\nSecurity risks, not scalable\n\nPrototypes, testing only\n\nBest Practices for DevOps-Ready Infrastructure\n----------------------------------------------\n\nCentralized Configuration Management\n------------------------------------\n\nCentralized configuration management is key to maintaining secure and consistent settings across different environments like development, staging, and production. The Twelve-Factor App methodology highlights this as crucial for building scalable and reliable applications.\n\n### Use Environment Variables\n\nEnvironment variables are a secure way to handle sensitive data such as API keys, database credentials, and service endpoints. They keep critical information out of your codebase, making it easier to update configurations without changing the code.\n\nHere’s how to use them effectively:\n\n*   Choose clear, descriptive names like `DB_CONNECTION_URI` for your variables.\n*   Store sensitive information, like credentials and API keys, in environment variables instead of hardcoding them into your application.\n*   Document all required variables clearly to ensure consistency and avoid errors.\n\n### Organize with Config Files\n\nEnvironment variables are great for sensitive data, but configuration files help organize and manage these settings systematically. The `.env` file format is widely used for this purpose.\n\nBest practices for config file organization include:\n\n*   Create separate `.env` files for different environments, such as:\n    *   `.env.development`\n    *   `.env.staging`\n    *   `.env.production`\n*   Use a `.env.example` file to document all required variables with sample values. This file should exclude any sensitive data and be tracked in version control for reference.\n\n### Add Validation and Fallbacks\n\nAdding validation and fallback mechanisms ensures your configuration management is robust and error-proof.\n\n*   Use libraries like `zod` or `envalid` to validate data types and formats during application startup [\\[2\\]](https://app.studyraid.com/en/read/11288/352144/environment-configuration-best-practices).\n*   Set default values for non-critical configurations and log instances where fallbacks are used.\n*   Provide clear error messages for invalid or missing configurations.\n*   Fail fast for missing essential configurations to prevent runtime issues.\n\nTools like `dotenv` can simplify loading environment variables from your configuration files [\\[2\\]](https://app.studyraid.com/en/read/11288/352144/environment-configuration-best-practices). By combining validation and fallback strategies, you can ensure y",
                    "idx": "2-2"
                  },
                  {
                    "title": "Environment Variables: How to Use Them and 4 Critical Best Practices",
                    "url": "https://configu.com/blog/environment-variables-how-to-use-them-and-4-critical-best-practices/",
                    "type": "website-preview",
                    "text": "One of the most common uses of environment variables is to store configuration settings for software applications. These settings can include database connection strings, application settings, and more.. \n\n[](https://configu.com/)\n\n[](https://github.com/configu)[](https://twitter.com/WeAreConfigu)[](https://www.linkedin.com/company/configu/)[](https://www.youtube.com/@configu294)[](https://discord.com/invite/cjSBxnB9z8)\n\n*   [Product](https://configu.com/product/)\n*   [Misconfigurations](https://oops.configu.com)\n*   [Docs](https://docs.configu.com/introduction/overview)\n*   [Resources](#)\n    *   [Blog](https://configu.com/blog/)\n    *   [Configuration ManagementWhat DevOps teams need to know](https://configu.com/blog/configuration-management-what-devops-teams-need-to-know/)\n    *   [DotenvManaging environment variables with dotenv](https://configu.com/blog/dotenv-managing-environment-variables-in-node-python-php-and-more/)\n    *   [Environment VariablesHow to use them and 4 critical best practices](https://configu.com/blog/environment-variables-how-to-use-them-and-4-critical-best-practices/)\n    *   [GitOpsPrinciples, examples, tools & best practices](https://configu.com/blog/the-gitops-guide-principles-examples-tools-best-practices/)\n    *   [Secret ManagementWhy, how, and 5 critical best practices](https://configu.com/blog/secret-management-why-how-and-5-critical-best-practices/)\n    *   [Feature FlagsBenefits, challenges & solutions](https://configu.com/blog/feature-flags-benefits-challenges-and-solutions/)\n    *   [HashiCorp Vault5 key features, pricing & alternatives](https://configu.com/blog/understanding-hashicorp-vault-5-key-features-pricing-alternatives/)\n    *   [Configuration Management SoftwareInfrastructure Vs. Applications](https://configu.com/blog/configuration-management-software-infrastructure-vs-applications/)\n    *   [LaunchDarklyKey Features, Pricing, Limitations & Alternatives](https://configu.com/blog/launchdarkly-key-features-pricing-limitations-alternatives/)\n    *   [DevOps Tools20 DevOps tools you should know in 2025](https://configu.com/blog/20-devops-tools-you-should-know-in-2025/)\n    *   [AWS Secrets ManagerFeatures, pricing, limitations & alternatives](https://configu.com/blog/aws-secret-manager-features-pricing-limitations-alternatives/)\n    *   [DevOps PipelinesKey concepts, stages, and 5 best practices](https://configu.com/blog/devops-pipelines-key-concepts-stages-and-5-best-practices/)\n    *   [Site Reliability EngineeringComplete Guide](https://configu.com/blog/site-reliability-engineering-complete-guide/)\n*   [Pricing](https://configu.com/pricing/)\n*   [Company](#)\n    *   [About Us](https://configu.com/about/)\n    *   [Contact Us](https://configu.com/contact-us/)\n    *   [Community](https://configu.com/community/)\n\n[](https://github.com/configu)[](https://twitter.com/WeAreConfigu)[](https://www.linkedin.com/company/configu/)[](https://www.youtube.com/@configu294)[](https://discord.com/invite/cjSBxnB9z8)\n\n*   [Star Us](https://github.com/configu/configu/)\n*   [Login](https://app.configu.com/)\n*   [Get it free](https://app.configu.com/)\n\nEnvironment Variables: How to Use Them and 4 Critical Best Practices\n====================================================================\n\nConfigu Editorial Team | October 25, 2023 | [Technical Guides](https://configu.com/blog/category/guides/)\n\nWhat Are Environment Variables? \n--------------------------------\n\nEnvironment variables are dynamic-named values that can influence the way running processes behave on a computer. They exist in every computer system, and they’re used to make the system aware of certain conditions. They can be created, edited, saved, and deleted, and they can be unique to a specific system, user, or application.\n\nAn environment variable is made up of a name/value pair. The name is an identifier that is used to call the value in a variety of functions and programs. The value, on the other hand, is the information associated with the variable. This information can be a directory path, a filename, a computer name, or any other type of data.\n\nEnvironment variables can change as the conditions in the system change. This can be due to changes made by the user, changes made by installed applications, or changes made by the system itself.\n\nIn the first part of this article, we’ll provide practical info on setting and working with environment variables in common operating systems and framework. In the second part, we’ll discuss broader considerations—why you should use environment variables, common use cases, options for storing them, and best practices.\n\nThis is part of an extensive series of guides about [software development](https://swimm.io/learn/software-development/understanding-software-development-process-tools-and-practice).\n\nIn this article:\n\n*   [What Are Environment Variables?](#What_Are_Environment_Variables \"What Are Environment Variables? \") \n*   [How to Set Environment Variables](#How_to_Set_Environment_",
                    "idx": "2-3"
                  },
                  {
                    "title": "Secrets and keys: Understand everything about environment variables to ...",
                    "url": "https://www.powerplatformspace.com/article/environment-variables-to-secure-secrets-and-keys",
                    "type": "website-preview",
                    "text": "Environment variables isolate secret values from application code, simplifying deployments and updates. They make it easy to manage environment-specific configurations (development, test, production) without changing the code.. ",
                    "idx": "2-4"
                  },
                  {
                    "title": "Environment Variable Management - LinkedIn",
                    "url": "https://www.linkedin.com/pulse/best-practices-environment-variable-management-bodanapati-xfsac",
                    "type": "website-preview",
                    "text": "Best Practices for Environment Variable Declaration. Sensitive Information Protection: Never store sensitive information such as API keys, passwords, or access tokens directly in code..... \n\nLinkedIn and 3rd parties use essential and non-essential cookies to provide, secure, analyze and improve our Services, and to show you relevant ads (including **professional and job ads**) on and off LinkedIn. Learn more in our [Cookie Policy](https://www.linkedin.com/legal/cookie-policy).\n\nSelect Accept to consent or Reject to decline non-essential cookies for this use. You can update your choices at any time in your [settings](https://www.linkedin.com/mypreferences/g/guest-cookies).\n\nAccept Reject\n\n  \n\nAgree & Join LinkedIn\n\nBy clicking Continue to join or sign in, you agree to LinkedIn’s [User Agreement](/legal/user-agreement?trk=linkedin-tc_auth-button_user-agreement), [Privacy Policy](/legal/privacy-policy?trk=linkedin-tc_auth-button_privacy-policy), and [Cookie Policy](/legal/cookie-policy?trk=linkedin-tc_auth-button_cookie-policy).\n\nSign in to view more content\n----------------------------\n\nCreate your free account or sign in to continue your search\n\nSign in\n\nWelcome back\n------------\n\nEmail or phone\n\nPassword\n\n Show\n\n[Forgot password?](https://www.linkedin.com/uas/request-password-reset?trk=pulse-article_contextual-sign-in-modal_sign-in-modal_forgot_password)  Sign in\n\nor\n\nBy clicking Continue to join or sign in, you agree to LinkedIn’s [User Agreement](/legal/user-agreement?trk=pulse-article_contextual-sign-in-modal_sign-in-modal_auth-button_user-agreement), [Privacy Policy](/legal/privacy-policy?trk=pulse-article_contextual-sign-in-modal_sign-in-modal_auth-button_privacy-policy), and [Cookie Policy](/legal/cookie-policy?trk=pulse-article_contextual-sign-in-modal_sign-in-modal_auth-button_cookie-policy).\n\nNew to LinkedIn? [Join now](https://www.linkedin.com/signup/cold-join?session_redirect=%2Fpulse%2Fbest-practices-environment-variable-management-bodanapati-xfsac&trk=pulse-article_contextual-sign-in-modal_sign-in-modal_join-link)\n\nor\n\nNew to LinkedIn? [Join now](https://www.linkedin.com/signup/cold-join?session_redirect=%2Fpulse%2Fbest-practices-environment-variable-management-bodanapati-xfsac&trk=pulse-article_contextual-sign-in-modal_join-link)\n\nBy clicking Continue to join or sign in, you agree to LinkedIn’s [User Agreement](/legal/user-agreement?trk=linkedin-tc_auth-button_user-agreement), [Privacy Policy](/legal/privacy-policy?trk=linkedin-tc_auth-button_privacy-policy), and [Cookie Policy](/legal/cookie-policy?trk=linkedin-tc_auth-button_cookie-policy).\n\n[Skip to main content](#main-content)\n\n[LinkedIn](/?trk=article-ssr-frontend-pulse_nav-header-logo)\n\n*   [Articles](https://www.linkedin.com/pulse/topics/home/?trk=article-ssr-frontend-pulse_guest_nav_menu_articles)\n*   [People](https://www.linkedin.com/pub/dir/+/+?trk=article-ssr-frontend-pulse_guest_nav_menu_people)\n*   [Learning](https://www.linkedin.com/learning/search?trk=article-ssr-frontend-pulse_guest_nav_menu_learning)\n*   [Jobs](https://www.linkedin.com/jobs/search?trk=article-ssr-frontend-pulse_guest_nav_menu_jobs)\n*   [Games](https://www.linkedin.com/games?trk=article-ssr-frontend-pulse_guest_nav_menu_games)\n\n[Join now](https://www.linkedin.com/signup/cold-join?session_redirect=%2Fpulse%2Fbest-practices-environment-variable-management-bodanapati-xfsac&trk=article-ssr-frontend-pulse_nav-header-join) [Sign in](https://www.linkedin.com/uas/login?session_redirect=%2Fpulse%2Fbest-practices-environment-variable-management-bodanapati-xfsac&fromSignIn=true&trk=article-ssr-frontend-pulse_nav-header-signin)[](https://www.linkedin.com/uas/login?session_redirect=%2Fpulse%2Fbest-practices-environment-variable-management-bodanapati-xfsac&fromSignIn=true&trk=article-ssr-frontend-pulse_nav-header-signin)\n\nEnvironment Variables\n\nBest Practices for Environment Variable Management in Software Development\n==========================================================================\n\n*   [Report this article](/uas/login?session_redirect=https%3A%2F%2Fwww.linkedin.com%2Fpulse%2Fbest-practices-environment-variable-management-bodanapati-xfsac&trk=article-ssr-frontend-pulse_ellipsis-menu-semaphore-sign-in-redirect&guestReportContentType=PONCHO_ARTICLE&_f=guest-reporting)\n\n[Sreenivasulu Bodanapati](https://in.linkedin.com/in/sreenivasulu-bodanapati)\n\n### Sreenivasulu Bodanapati\n\n#### Software Applications Development Engineer @NTT | Expert in Building Scalable Applications, Microservices, and Streamlined CI/CD Pipelines | Enabling Efficient Development and Deployment in Cloud-Native Environments\n\nPublished Feb 21, 2024\n\n[\\+ Follow](https://www.linkedin.com/signup/cold-join?session_redirect=%2Fpulse%2Fbest-practices-environment-variable-management-bodanapati-xfsac&trk=article-ssr-frontend-pulse_publisher-author-card)\n\nIn the world of software development, environment variables play a crucial role in configuring applications, managing sensitive information, and ensuring se",
                    "idx": "2-5"
                  },
                  {
                    "title": "Manage environment variables | Microsoft Learn",
                    "url": "https://learn.microsoft.com/en-us/azure/developer/azure-developer-cli/manage-environment-variables",
                    "type": "website-preview",
                    "text": "Environment variables influence how resources are provisioned and deployed to Azure. This is especially useful when running azd in CI/CD workflow scenarios. Environment variables can be referenced in parameter files (*.parameters.json for Bicep, *.tfvars.json for Terraform) as part of provisioning.. \n\n[Skip to main content](#main) [Skip to Ask Learn chat experience](#)\n\nThis browser is no longer supported.\n\nUpgrade to Microsoft Edge to take advantage of the latest features, security updates, and technical support.\n\n[Download Microsoft Edge](https://go.microsoft.com/fwlink/p/?LinkID=2092881 ) [More info about Internet Explorer and Microsoft Edge](https://learn.microsoft.com/en-us/lifecycle/faq/internet-explorer-microsoft-edge)\n\nTable of contents Exit focus mode\n\nAsk Learn Ask Learn\n\nTable of contents [Read in English](#) Add Add to plan [Edit](https://github.com/MicrosoftDocs/azure-dev-docs/blob/main/articles/azure-developer-cli/manage-environment-variables.md)\n\n* * *\n\n#### Share via\n\n[Facebook](#) [x.com](#) [LinkedIn](#) [Email](#)\n\n* * *\n\nPrint\n\n* * *\n\nNote\n\nAccess to this page requires authorization. You can try [signing in](#) or changing directories.\n\nAccess to this page requires authorization. You can try changing directories.\n\nManage environment variables\n============================\n\n*   2024-09-17\n\nFeedback\n\nIn this article\n---------------\n\nEnvironment variables influence how resources are provisioned and deployed to Azure. This is especially useful when running azd in CI/CD workflow scenarios.\n\nInput Parameters Substitution\n-----------------------------\n\nEnvironment variables can be referenced in parameter files (`*.parameters.json` for Bicep, `*.tfvars.json` for Terraform) as part of provisioning. When an environment variable substitution syntax is encountered, `azd` automatically substitutes the reference with the actual environment variable value set. Substitution also occurs for certain configuration settings in `azure.yaml` (properties documented with 'Supports environment variable substitution'), and in deployment configuration files, such as deployment manifests for `aks`.\n\n### Input parameter substitution example (Bicep)\n\nSuppose that you have the environment variable `AZURE_LOCATION` set:\n\n    export AZURE_LOCATION=westus3\n    \n\n    $env:AZURE_LOCATION='westus3'\n    \n\nIn the `main.parameters.json` file, you can reference `AZURE_LOCATION` and allow for environment substitution using the following syntax:\n\n    {\n      \"$schema\": \"https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#\",\n      \"contentVersion\": \"1.0.0.0\",\n      \"parameters\": {\n        \"location\": {\n          \"value\": \"${AZURE_LOCATION}\"\n        }\n      }\n    }\n    \n\nEnvironment-specific `.env` file\n--------------------------------\n\nOutputs for infrastructure provisioning are automatically stored as environment variables in an `.env` file, located under `.azure/<environment name>/.env`. This setup allows for a local application, or deployment scripts, to use variables stored in the `.env` file to reference Azure-hosted resources if needed. To see these outputs, run `azd env get-values`, or `azd env get-values --output json` for JSON output.\n\n### Environment variables provided by `azd`\n\nThe following are variables that are automatically provided by `azd`:\n\nName\n\nDescription\n\nExamples\n\nWhen available\n\n`AZURE_ENV_NAME`\n\nThe name of the environment in-use.\n\n`todo-app-dev`\n\nWhen an environment is created (after running azd init or azd env new, for example).\n\n`AZURE_LOCATION`\n\nThe location of the environment in-use.\n\n`eastus2`\n\nRight before an environment is provisioned for the first time.\n\n`AZURE_PRINCIPAL_ID`\n\nThe running user/service principal.\n\n`925cff12-ffff-4e9f-9580-8c06239dcaa4`\n\nDetermined automatically during provisioning (ephemeral).\n\n`AZURE_SUBSCRIPTION_ID`\n\nThe targeted subscription.\n\n`925cff12-ffff-4e9f-9580-8c06239dcaa4`\n\nRight before an environment is provisioned for the first time.\n\n`SERVICE_<service>_IMAGE_NAME`\n\nThe full name of the container image published to Azure Container Registry for container app services.\n\n`todoapp/web-dev:azdev-deploy-1664988805`\n\nAfter a successful publishing of a `containerapp` image\n\nUser-provided environment variables\n-----------------------------------\n\nUser-provided variables can be declared as an infrastructure output parameter (which is automatically stored in `.env`) in the `main.bicep` file, or set directly by the user in the environment (`azd env set <key> <value>`). `azd` reads the values as configuration and perform differently.\n\nName\n\nDescription\n\nExamples\n\nEffects\n\n`AZURE_AKS_CLUSTER_NAME`\n\nThe name of the Azure Kubernetes Service cluster to target.\n\n`aks-my-cluster`\n\nRequired property for deployment of an `aks` service.\n\n`AZURE_RESOURCE_GROUP`\n\nThe specific resource group to target. Type string.\n\n`rg-todo-dev`\n\n`azd` won't perform resource group discovery, and instead references this resource group. `azd` also doesn't control the authored IaC con",
                    "idx": "2-6"
                  },
                  {
                    "title": "The Ultimate Guide to .NET Environment Variables",
                    "url": "https://argosco.io/the-ultimate-guide-to-net-environment-variables/net/",
                    "type": "website-preview",
                    "text": "This article covers setting and reading environment variables in .NET across different operating systems, discusses security practices, and explains their application in CI/CD pipelines, enhancing flexibility, security, and environment management for developers.. \n\n*   [.net](https://argosco.io/category/net/)\n*   [c#](https://argosco.io/category/c/)\n*   [Let’s Connect](https://argosco.io/lets-connect/)\n\n[](https://argosco.io)\n\n[.net](https://argosco.io/category/net/)\n\nThe Ultimate Guide to .NET Environment Variables\n================================================\n\nWritten by\n\n[Hatim](https://argosco.io/author/hatimrih0b25801646/)\n\n·\n\nDecember 12, 2024\n\n1\\. Introduction\n----------------\n\n### What are Environment Variables?\n\nThink of environment variables as little notes your operating system passes to your application. These notes can include configuration details, secrets, or anything else your app needs to function properly without hardcoding values.\n\nFor example, an environment variable might store your database connection string or the API key for a third-party service.\n\n#### In this article you can find answers to the following questions :\n\nWhat are environment variables, and how can I set them on different operating systems (Windows, macOS, Linux)?\n\nHow do I read environment variables in a .NET application, and what’s the difference between using them and appsettings.json?\n\nWhat is the ASPNETCORE\\_ENVIRONMENT variable, and how does it help in managing multiple environments like development, staging, and production?\n\nWhat are the security risks of using environment variables, and how can I securely store sensitive data like API keys and connection strings?\n\nHow does .NET prioritize configuration sources, and how can I override appsettings.json values with environment variables?\n\nHow do I use environment variables in CI/CD pipelines to manage builds and deployments effectively?\n\nWhat tools and techniques can I use to debug and troubleshoot issues related to environment variables in a .NET application?\n\n### Why Use Them in .NET?\n\nEnvironment variables are like a Swiss Army knife for developers! They:\n\n*   **Add flexibility**: Change configurations without touching your code.\n*   **Enhance security**: Store sensitive data outside your source code.\n*   **Simplify deployments**: Adjust settings for different environments (like Dev, Staging, or Prod).\n\n2\\. Basics for Beginners\n------------------------\n\n### How to Set Environment Variables\n\n#### Windows\n\n1.  Open the Start Menu and search for “Environment Variables.”\n2.  Under **System Properties**, click **Environment Variables.**\n3.  Add a new variable under **System variables** or **User variables.**\n\n#### macOS/Linux\n\nRun the following command in your terminal:\n\n    export MY_VARIABLE=\"HelloWorld\"\n\nTo make it permanent, add it to your shell configuration file (e.g., `~/.bashrc` or `~/.zshrc`).\n\n#### Using .env Files\n\nInstall the [dotenv](https://www.nuget.org/packages/DotNetEnv/) package:\n\n    dotnet add package DotNetEnv\n\nCreate a `.env` file:\n\n    MY_VARIABLE=HelloWorld\n\nLoad it in your app:\n\n    DotNetEnv.Env.Load();\n    string value = Environment.GetEnvironmentVariable(\"MY_VARIABLE\");\n\n### Reading Environment Variables in .NET\n\n    string? myVariable = Environment.GetEnvironmentVariable(\"MY_VARIABLE\");\n    Console.WriteLine(myVariable ?? \"Variable not set\");\n\nRun your app with the variable set:\n\n    MY_VARIABLE=\"Hello from Bash\" dotnet run\n\n3\\. Best Practices\n------------------\n\n### Naming Conventions\n\n*   Use `UPPER_SNAKE_CASE` for consistency.\n*   Be descriptive: `DB_CONNECTION_STRING` is better than `DB_STR`.\n\n### Security Concerns\n\n*   **Don’t hardcode sensitive data.**\n*   Use secret management tools like:\n*   [Azure Key Vault](https://learn.microsoft.com/en-us/azure/key-vault/)\n*   [AWS Secrets Manager](https://aws.amazon.com/secrets-manager/)\n\n### Managing Secrets\n\nFor local development, use the .NET Secret Manager:\n\n    dotnet user-secrets init\n    dotnet user-secrets set \"MySecret\" \"SuperSecretValue\"\n\nRetrieve it in code:\n\n    var builder = new ConfigurationBuilder()\n        .AddUserSecrets<Program>();\n    var config = builder.Build();\n    string mySecret = config[\"MySecret\"];\n\n4\\. Advanced Configuration in .NET\n----------------------------------\n\n### Configuration Providers\n\n.NET’s `IConfiguration` is a powerhouse. Combine multiple providers, including environment variables:\n\n    var builder = new ConfigurationBuilder()\n        .AddJsonFile(\"appsettings.json\")\n        .AddEnvironmentVariables();\n    var configuration = builder.Build();\n\n### Priority and Precedence\n\n.NET resolves configuration sources in the order they’re added. Environment variables override `appsettings.json` if listed last.\n\n5\\. Environment-Specific Settings\n---------------------------------\n\n### Handling Multiple Environments\n\nUse `ASPNETCORE_ENVIRONMENT` to differentiate environments:\n\n    export ASPNETCORE_ENVIRONMENT=Development\n\nIn `Program.cs`:\n\n    var environment =",
                    "idx": "2-7"
                  },
                  {
                    "title": "Understanding Environment Variables and Configuration Files in ... - Medium",
                    "url": "https://medium.com/@tivole/understanding-environment-variables-and-configuration-files-in-net-c-88aa8601b332",
                    "type": "website-preview",
                    "text": "Two common ways to manage configurations are through environment variables and configuration files like appsettings.json. However, understanding the differences between these approaches and.... \n\n[Sitemap](/sitemap/sitemap.xml)\n\n[Open in app](https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F88aa8601b332&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderUser&%7Estage=mobileNavBar&source=post_page---top_nav_layout_nav-----------------------------------------)\n\nSign up\n\n[Sign in](/m/signin?operation=login&redirect=https%3A%2F%2Fmedium.com%2F%40tivole%2Funderstanding-environment-variables-and-configuration-files-in-net-c-88aa8601b332&source=post_page---top_nav_layout_nav-----------------------global_nav------------------)\n\n[](/?source=post_page---top_nav_layout_nav-----------------------------------------)\n\n[\n\nWrite\n\n\n\n](/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---top_nav_layout_nav-----------------------new_post_topnav------------------)\n\n[\n\n](/search?source=post_page---top_nav_layout_nav-----------------------------------------)\n\nSign up\n\n[Sign in](/m/signin?operation=login&redirect=https%3A%2F%2Fmedium.com%2F%40tivole%2Funderstanding-environment-variables-and-configuration-files-in-net-c-88aa8601b332&source=post_page---top_nav_layout_nav-----------------------global_nav------------------)\n\n[Mastodon](https://mastodon.social/@tivole)\n\nUnderstanding Environment Variables and Configuration Files in .NET C#\n======================================================================\n\n[\n\n](/@tivole?source=post_page---byline--88aa8601b332---------------------------------------)\n\n[Kamran Asgarov](/@tivole?source=post_page---byline--88aa8601b332---------------------------------------)\n\n7 min read\n\n·\n\nApr 18, 2024\n\n[\n\n](/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Fp%2F88aa8601b332&operation=register&redirect=https%3A%2F%2Fmedium.com%2F%40tivole%2Funderstanding-environment-variables-and-configuration-files-in-net-c-88aa8601b332&user=Kamran+Asgarov&userId=fc9c825f11f9&source=---header_actions--88aa8601b332---------------------clap_footer------------------)\n\n\\--\n\n3\n\n[](/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F88aa8601b332&operation=register&redirect=https%3A%2F%2Fmedium.com%2F%40tivole%2Funderstanding-environment-variables-and-configuration-files-in-net-c-88aa8601b332&source=---header_actions--88aa8601b332---------------------bookmark_footer------------------)\n\nListen\n\nShare\n\nIn the world of .NET development, managing configuration settings is an essential aspect of building robust and secure applications. Two common ways to manage configurations are through environment variables and configuration files like `appsettings.json`. However, understanding the differences between these approaches and knowing when to use each can be challenging, especially for developers new to the .NET ecosystem. This blog aims to demystify these concepts and provide practical guidance on how to effectively manage configurations in your .NET projects.\n\nUnderstanding appsettings\n=========================\n\nWhat is appsettings.json\n------------------------\n\n`appsettings.json` is a JSON file used to store configuration settings for .NET applications. It provides a structured way to define settings like database connection strings, API URLs, logging settings, and more.\n\nHow is it different from .env files\n-----------------------------------\n\n`.env` files are simple text files where you define environment variables in a `KEY=VALUE` format, with each variable on a new line. These files are often used to store sensitive information like API keys, database passwords, and other configuration details that should not be hardcoded in the application's source code.\n\nOn the other hand `appsettings.json`, while also used for storing configuration settings, is typically used for non-sensitive information and is included in the source code repository. It allows developers to define default configuration settings that are common across all environments. However, sensitive information should not be stored directly in `appsettings.json`. Instead, placeholders or references to environment variables can be used to ensure that sensitive information is not exposed in the source code.\n\nappsettings.json & .env\n\nUsing appsettings in ASP.NET CORE\n=================================\n\nHow to use appsettings.json\n---------------------------\n\nTo access values from `appsettings.json`, you can use the `Configuration` property of the `WebApplicationBuilder` class in your ASP.NET Core application. Here's a basic example of how to do it:\n\nvar builder = WebApplication.CreateBuilder(args);  \n  \nvar apiKey = builder.Configuration.GetValue<string>(\"ApiConfiguration:Key\");  \nConsole.WriteLine($\"API Key: {apiKey}\");  \n  \nbuilder.Services.AddControllers();  \nbuilder.Services.AddEndpointsApiExplorer();  \n  \nvar app = builder.Build();  \n  \napp.UseHttpsRedirection();  \napp.MapControllers();  \n  ",
                    "idx": "2-8"
                  },
                  {
                    "title": "Managing Dependencies and Environment Variables in Nodejs Applications",
                    "url": "https://moldstud.com/articles/p-managing-dependencies-and-environment-variables-in-nodejs-applications",
                    "type": "website-preview",
                    "text": "By following best practices such as defining specific versions of dependencies, updating them regularly, and securely managing environment variables, developers can mitigate security risks and build robust applications.. \n\n[](/)[Articles](/articles)[Developers FAQ](/articles/c-developers-faq)[Senior node js developers questions](/articles/c-senior-node-js-developers-questions)**Managing Dependencies and Environment Variables in Nodejs Applications**\n\nPublished on30 October 2024 by [Valeriu Crudu](/authors/valeriu-crudu) & MoldStud Research Team\n\nManaging Dependencies and Environment Variables in Nodejs Applications\n======================================================================\n\nWhen developing Node.js applications, managing dependencies and environment variables is crucial for ensuring smooth operation and security. In this article, we will discuss best practices for handling these aspects in your Node.js projects. Dependency Management Node.\n\nManaging Dependencies and Environment Variables in Node.js Applications\n-----------------------------------------------------------------------\n\njs relies heavily on npm, the Node Package Manager, for managing dependencies. By defining dependencies in your package.json file, you can easily install and update packages for your project. However, it is important to follow best practices to avoid dependency conflicts and ensure the stability of your application.\n\n*   Always specify exact versions for your dependencies to avoid unexpected changes. Use the npm shrinkwrap command to lock down your dependency tree.\n*   Regularly update your dependencies to benefit from bug fixes and security updates. Use npm audit to check for vulnerabilities in your dependencies.\n*   Avoid global dependencies and install packages locally within your project to prevent version conflicts.\n\nBy following these best practices, you can maintain a clean and organized dependency tree for your Node.js application, reducing the risk of issues arising from incompatible packages.\n\n### Environment Variables\n\nManaging environment variables is essential for configuring your Node.js application for different environments such as development, staging, and production. Environment variables can contain sensitive information such as database credentials or API keys, so it is important to handle them securely.\n\n*   Store sensitive information in environment variables instead of hardcoding them in your code. This helps to keep your secrets secure and allows for easier configuration across different environments.\n*   Use a module like dotenv to load environment variables from a .env file in your project. This makes it easy to manage and switch between different configurations.\n*   Do not commit your .env file to version control to prevent exposing your sensitive information. Use a .gitignore file to exclude it from your repository.\n\nBy following these best practices, you can ensure that your Node.js application is secure and easily configurable across different environments. Properly managing environment variables will help you avoid potential security risks and simplify the deployment process of your application.\n\nManaging dependencies and environment variables in Node.js applications is a critical aspect of software development. By following best practices for dependency management and environment variable handling, you can ensure the stability, security, and scalability of your Node.js projects.\n\nRemember to regularly update your dependencies, specify exact versions, and securely manage your environment variables to optimize the performance and security of your Node.js applications. By implementing these best practices, you can streamline your development process and build robust and secure Node.js applications.\n\nManaging Dependencies and Environment Variables in Node.js Applications: Tools for Dependency Management\n--------------------------------------------------------------------------------------------------------\n\njs applications.\n\n### Understanding Dependency Management in Node.js\n\nDependency management in Node.js is the process of handling external libraries and packages that your application relies on to function correctly. These dependencies are managed using package managers such as npm or Yarn. These tools allow you to easily install, update, and remove dependencies from your project.\n\nOne of the key advantages of using package managers is that they help you maintain a clean and organized project structure. By specifying your project's dependencies in a `package.json` file, you can ensure that your application is always using the correct versions of each library.\n\nAnother important aspect of dependency management is handling environment variables. Environment variables are used to store sensitive information such as API keys or database credentials. It is crucial to manage these variables securely to prevent unauthorized access to your application's sensitive data.\n\n### Tools for Dependency ",
                    "idx": "2-9"
                  }
                ]
              }
            }
          ]
        },
        {
          "role": "assistant",
          "content": "Basierend auf der Analyse des Newstextes ordne ich ihn folgenden Kategorien zu:\n\n## Kategorisierung des Newstextes\n\n**Gewählte Kategorien:**\n\n### programming - Relevanz: 8/10\nDer Text behandelt fundamentale Programmierkonzepte zur Konfigurationsverwaltung in Anwendungen. Die verschiedenen Ansätze (Konfigurationsdateien im Repository, Deploy-Zeit-Konfiguration, Environment Variables) sind für alle Programmierer relevant, da sie universelle Probleme der Softwareentwicklung lösen 【2-0】【2-1】.\n\n### security - Relevanz: 7/10\nSicherheitsaspekte sind ein zentrales Thema des Artikels, insbesondere der Schutz kritischer Daten wie Datenbankzugangsdaten. Der Text zeigt explizit auf, wie verschiedene Ansätze unterschiedliche Sicherheitsrisiken bergen und empfiehlt Environment Variables als sicherste Lösung 【2-0】【2-3】.\n\n### databases - Relevanz: 6/10\nDatenbankverbindungen werden als Hauptbeispiel für umgebungsabhängige Konfiguration verwendet. Der Text behandelt spezifisch die sichere Verwaltung von Datenbankzugangsdaten in verschiedenen Umgebungen (dev, stage, prod) 【2-2】.\n\n### work - Relevanz: 5/10\nDer Artikel adressiert praktische Arbeitsabläufe in der Softwareentwicklung, insbesondere Deployment-Prozesse und die Zusammenarbeit zwischen Entwicklungs- und Produktionsumgebungen. Die Empfehlungen haben direkten Einfluss auf Entwicklungsworkflows 【2-2】.\n\n**Nicht gewählte Kategorien:**\n- **ai**: Keine Erwähnung von KI-Technologien\n- **data protection**: Fokus liegt auf technischer Konfiguration, nicht auf Datenschutzbestimmungen\n- **copyright**: Keine rechtlichen Aspekte behandelt",
          "id": "9c60e105-e753-485f-a731-073dde60c8a5"
        }
      ],
      "formattedResult": [
        [
          {
            "name": "programming",
            "relevance": 8,
            "reasoning": "Der Text behandelt fundamentale Programmierkonzepte zur Konfigurationsverwaltung in Anwendungen und zeigt verschiedene technische Ansätze auf, die für alle Programmierer relevant sind."
          },
          {
            "name": "security",
            "relevance": 7,
            "reasoning": "Sicherheitsaspekte sind zentral behandelt, insbesondere der Schutz kritischer Daten wie Datenbankzugangsdaten und die Risiken verschiedener Konfigurationsansätze."
          },
          {
            "name": "databases",
            "relevance": 6,
            "reasoning": "Datenbankverbindungen werden als Hauptbeispiel für umgebungsabhängige Konfiguration verwendet und die sichere Verwaltung von DB-Zugangsdaten wird explizit behandelt."
          },
          {
            "name": "work",
            "relevance": 5,
            "reasoning": "Der Artikel adressiert praktische Arbeitsabläufe in der Softwareentwicklung, Deployment-Prozesse und hat direkten Einfluss auf Entwicklungsworkflows."
          }
        ]
      ]
    }
  }
}