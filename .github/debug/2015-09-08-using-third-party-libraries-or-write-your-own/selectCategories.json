{
  "request": {
    "output": {
      "type": "array",
      "schema": {
        "type": "array",
        "items": {
          "type": "object",
          "required": [
            "name",
            "relevance"
          ],
          "properties": {
            "name": {
              "type": "string"
            },
            "relevance": {
              "type": "number"
            },
            "reasoning": {
              "type": "string"
            }
          }
        }
      }
    },
    "prompt": "\nDu bist ein technischer News-Kategorisierungsassistent mit Fachkenntnissen in IT, Künstlicher Intelligenz, Programmierung, Datenbanken, Arbeitswelt und rechtlichen Themen.\nDeine Aufgabe ist es, einen gegebenen Newstext den passenden Kategorien zuzuordnen und für jede Kategorie eine Relevanz zwischen 1 (nur für Spezialinteressierte) und 10 (bahnbrechend, für alle relevant) zu vergeben.\n\nDie Kategorien werden dir als Markdown-Liste vorgegeben.\nGehe folgendermaßen vor:\n1. Analysiere den Newstext.\n2. Wähle alle passenden Kategorien.\n3. Vergib für jede gewählte Kategorie eine Relevanz von 1 bis 10 und begründe deine Einstufung in einem Satz.\n\nHier ist die Kategorien-Liste:\n- ai\n- programming\n- databases\n- security\n- work\n- data protection\n- copyright\n\nHier ist der Newstext:\n# Using third party libraries or write your own\n\n\r\nUsing third party libraries or not is a hard decision for beginners. The advantages are not immediately visible in the first time and its so much faster to just start with exactly what you need.\r\n\r\n<!--more-->\r\n\r\n## The progress of the first project\r\n\r\n* Mix code with HTML into one file per page and have fast visible results\r\n* After making few pages we don't want to copy the navigation into all pages, so we exclude them into own file and include everywhere\r\n* Later we realize we have to much logic in our mixed files, so we exclude the logic into own files and include the HTML mix file at the end for the output\r\n\r\nSo what do we have then?\r\n\r\n* Separate controller and views\r\n* View logic with separating and including partials\r\n\r\nIn Node.js we would have the same after minutes: Express for controller and view separating together with a template engine for the view logic. And not only MVC. For many problems are solutions already available.\r\n\r\nWith using common libraries we get a few other advantages:\r\n\r\n* They are well tested and optimized\r\n* Evaluating different solutions and the learning curve costs time at beginning, saves time later to extend and maintain the application\r\n* They are flexible and small, better chance to be able to reuse them\r\n* There are tutorials, extensions and help available\r\n* The chance new developers have already experience with them\r\n\r\n## Summary\r\n\r\nSo using a third party library or write your own is at the end not a question. Use libraries which solve the problems, extend them where its needed and focus on your business logic and the real thing you want to develop.\r\n\n    ",
    "timestamp": "2025-07-04T13:40:46.601Z"
  },
  "response": {
    "data": {
      "result": [
        {
          "role": "assistant",
          "content": [
            {
              "type": "tool-call",
              "toolCallId": "tooluse_5Gd102mNRnGLPh3vGmbUpw",
              "toolName": "web_search",
              "args": {
                "query": "third party libraries vs custom development programming best practices 2024"
              }
            }
          ],
          "id": "8ad9cfa5-9cb7-4891-b4bf-14491d2c213b"
        },
        {
          "role": "tool",
          "id": "7b1fe6c7-263c-4f51-97b9-ab7ba7505977",
          "content": [
            {
              "type": "tool-result",
              "toolCallId": "tooluse_5Gd102mNRnGLPh3vGmbUpw",
              "toolName": "web_search",
              "result": {
                "input": "third party libraries vs custom development programming best practices 2024",
                "output": [
                  {
                    "title": "Custom vs Third-Party Component Libraries - fadamakis.com",
                    "url": "https://fadamakis.com/custom-vs-third-party-component-libraries-c3337504a016",
                    "type": "website-preview",
                    "text": "Third-party solutions are excellent for prototyping but can become problematic as a codebase grows larger. On the other hand, a custom implementation requires a significant investment of time, which is a valuable resource. Leveraging a headless component library makes the most sense nowadays.. ",
                    "idx": "2-0"
                  },
                  {
                    "title": "Why You Should Write Your Own Code Instead of Relying on Third-Party ...",
                    "url": "https://medium.com/@journalehsan/why-you-should-write-your-own-code-instead-of-relying-on-third-party-libraries-6f40ec26ef6f",
                    "type": "website-preview",
                    "text": "When it comes to software development, there is a lot of debate about whether it is better to write your own code or use third-party libraries. There are pros and cons to both approaches,.... \n\n[Sitemap](/sitemap/sitemap.xml)\n\n[Open in app](https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F6f40ec26ef6f&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderUser&%7Estage=mobileNavBar&source=post_page---top_nav_layout_nav-----------------------------------------)\n\nSign up\n\n[Sign in](/m/signin?operation=login&redirect=https%3A%2F%2Fmedium.com%2F%40journalehsan%2Fwhy-you-should-write-your-own-code-instead-of-relying-on-third-party-libraries-6f40ec26ef6f&source=post_page---top_nav_layout_nav-----------------------global_nav------------------)\n\n[](/?source=post_page---top_nav_layout_nav-----------------------------------------)\n\n[\n\nWrite\n\n\n\n](/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---top_nav_layout_nav-----------------------new_post_topnav------------------)\n\n[\n\n](/search?source=post_page---top_nav_layout_nav-----------------------------------------)\n\nSign up\n\n[Sign in](/m/signin?operation=login&redirect=https%3A%2F%2Fmedium.com%2F%40journalehsan%2Fwhy-you-should-write-your-own-code-instead-of-relying-on-third-party-libraries-6f40ec26ef6f&source=post_page---top_nav_layout_nav-----------------------global_nav------------------)\n\nWhy You Should Write Your Own Code Instead of Relying on Third-Party Libraries\n==============================================================================\n\n[\n\n](/@journalehsan?source=post_page---byline--6f40ec26ef6f---------------------------------------)\n\n[Ehsan Tork](/@journalehsan?source=post_page---byline--6f40ec26ef6f---------------------------------------)\n\n6 min read\n\n·\n\nFeb 12, 2024\n\n[\n\n](/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Fp%2F6f40ec26ef6f&operation=register&redirect=https%3A%2F%2Fmedium.com%2F%40journalehsan%2Fwhy-you-should-write-your-own-code-instead-of-relying-on-third-party-libraries-6f40ec26ef6f&user=Ehsan+Tork&userId=d8e6c3aafebd&source=---header_actions--6f40ec26ef6f---------------------clap_footer------------------)\n\n\\--\n\n[](/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F6f40ec26ef6f&operation=register&redirect=https%3A%2F%2Fmedium.com%2F%40journalehsan%2Fwhy-you-should-write-your-own-code-instead-of-relying-on-third-party-libraries-6f40ec26ef6f&source=---header_actions--6f40ec26ef6f---------------------bookmark_footer------------------)\n\nListen\n\nShare\n\nWhen it comes to software development, there is a lot of debate about whether it is better to write your own code or use third-party libraries. There are pros and cons to both approaches, but in general, writing your own code can be more beneficial for a number of reasons.\n\nSecurity\n========\n\nOne of the biggest concerns with using third-party libraries is security. When you use a library, you are essentially trusting the library’s author to maintain the code and keep it secure. However, if the author is not careful, or if the library is not well-maintained, it could contain security vulnerabilities that could be exploited by attackers.\n\nFor example, in 2016, a popular JavaScript library called `left-pad` was found to contain a critical security vulnerability. The vulnerability allowed attackers to inject malicious code into applications that used the library. This vulnerability was exploited in a number of high-profile attacks, including the attack on the **NPM** package manager.\n\nLeft Pad Code:\n--------------\n\nif you’re still interested in understanding the implementation, here’s a simple version of `padStart` you can consider:\n\nfunction padStart(str, targetLength, padString = \" \") {  \n  if (str.length >= targetLength) {  \n    return str;  \n  }  \n  let result = \"\";  \n  for (let i = 0; i < targetLength - str.length; i++) {  \n    result += padString;  \n  }  \n  result += str;  \n  return result;  \n}\n\n// Example usage  \nconsole.log(padStart(\"hello\", 10, \"-\")); // Output: ----hello\n\nRemember, this is a basic example and may not be as optimized or feature-rich as existing libraries. Always prioritize security and stability when choosing dependencies for your projects.\n\nIf you write your own code, you can be sure that it is secure and that it meets your specific security requirements. You can also avoid the risk of using a library that contains a security vulnerability.\n\n**Here’s a step-by-step breakdown of the code:**\n\n**1\\. Function Definition:**\n\n*   `function padStart(str, targetLength, padString = \" \") { ... }`\n*   This line defines a function named `padStart` that accepts three arguments:\n*   `str`: The string to be padded.\n*   `targetLength`: The desired length of the padded string.\n*   `padString`: The string to use for padding (optional, defaults to a space).\n\n**2\\. Early Return:**\n\n*   `if (str.length >= targetLength) { return str; }`\n*   This check ensures efficiency. If the input string is already at or longer tha",
                    "idx": "2-1"
                  },
                  {
                    "title": "Third-party vs. Custom Development · Lore",
                    "url": "https://lore.dev/development/third-party-vs-custom-development",
                    "type": "website-preview",
                    "text": "Let's look at how to determine when third-party libraries, APIs, and web services are a better option over custom development from scratch. Third-party libraries, APIs, and web services can significantly accelerate your application's completion and offer multiple benefits.. \n\n[](/)\n\n*   [ABOUT](/about)\n*   [READ THE GUIDEBOOK](/core-skills/communication)\n*   [CONTRIBUTOR GUIDE](/contributor-guide)\n*   [](https://github.com/theloredev/lore-content)\n\n_›_Development\n--------------\n\n### Core Skills\n\n*   [Communication](/core-skills/communication)\n*   [Writing](/core-skills/writing)\n\n### Development\n\n*   [Code Reviews](/development/code-reviews)\n*   [Database](/development/database)\n*   [Error Handling](/development/error-handling)\n*   [Estimation](/development/estimation)\n*   [Pair Programming](/development/pair-programming)\n*   [Refactoring](/development/refactoring)\n*   [Security](/development/security)\n*   [System Architecture](/development/system-architecture)\n*   [Third-party vs. Custom Development](/development/third-party-vs-custom-development)\n*   [Writing Code](/development/writing-code)\n\n### Code Management\n\n*   [Introduction](/code-management/introduction)\n*   [Branching & Workflow Strategies](/code-management/branching-&-workflow-strategies)\n*   [Commit](/code-management/commit)\n\n### Testing\n\n*   [Automated Testing](/testing/automated-testing)\n\n[Edit](https://github.com/theloredev/lore-content/edit/staging/development/third-party-vs-custom-development.md)\n\nThird-party vs. Custom Development\n==================================\n\nLet's look at how to determine when third-party libraries, APIs, and web services are a better option over custom development from scratch. Third-party libraries, APIs, and web services can significantly accelerate your application's completion and offer multiple benefits. Still, they can introduce some risks and may not fit all situations and projects.\n\n[](#possible-benefits-of-third-party)Possible benefits of third-party\n---------------------------------------------------------------------\n\n### [](#save-development-time)Save development time\n\nA third-party library, API, or web service that provides the functionality required but is also easy to learn and integrate into your application can save hours, days, or even weeks of development time.\n\n### [](#save-money)Save money\n\nThousands of stable, tested, and free-of-charge third-party libraries and APIs are available to assist you with completing your application.\n\nMany such libraries and APIs are available under Open Source licenses, such as the [GNU General Public License](https://opensource.org/licenses/GPL-3.0), the [BSD License](https://opensource.org/licenses/BSD-3-Clause), and the [Apache License](https://opensource.org/licenses/Apache-2.0), which offer very generous rights to use, modify, and redistribute the software.\n\nAs an example, [Apache](https://projects.apache.org/projects.html?category) maintains an extensive collection of third-party Open Source libraries and APIs.\n\nAnother example is the Python Package Index [(PyPi)](https://pypi.org).\n\n### [](#improvements-to-your-applications-stability-and-security)Improvements to your application's stability and security\n\nYour team can avoid introducing unwanted bugs and security flaws that are likely to occur when coding common, complex functionality from scratch.\n\nSee [Open source vs Build your own software](http://abstractedge.com/open-source-vs-build-your-own-software/).\n\nExample scenario:\n\nIf your application needs the functionality to handle encrypted authentication and process occasional PDF files. The completion of your application as a whole can become side-tracked and delayed if the development team devotes extensive time to developing and debugging encryption algorithms and PDF rendering functionality from scratch.\n\nYour application might also benefit from long-term stability and security of well-tested third-party libraries, APIs, and web services. They can be well-maintained by their original author or vendor with frequent bug fix releases.\n\nYou should research the release history of any third-party libraries, APIs, and web services under consideration for inclusion.\n\nA well-tested and well-maintained third-party component will have been in active development for several years with frequent software releases that include bug fixes and other improvements.\n\nAs an example, take a look at the extensive release history for the open-source [ImageMagick](https://imagemagick.org/script/changelog.php) library.\n\n### [](#possible-reduced-application-maintenance-when-using-third-party)Possible reduced application maintenance when using third-party\n\nUtilizing a stable, well-tested web service maintained by a third-party means your team does not have to devote time and effort to maintaining and repairing that portion of your application.\n\n[](#risks-associated-with-using-third-party)Risks associated with using third-party\n-------------------------------------------------------",
                    "idx": "2-2"
                  },
                  {
                    "title": "Custom vs Third-Party Component Libraries - bytegoblin.io",
                    "url": "https://bytegoblin.io/blog/custom-vs-third-party-component-libraries.mdx",
                    "type": "website-preview",
                    "text": "Custom Component Libraries: Built from scratch by a development team to meet specific project requirements. Third-Party Component Libraries: Pre-built libraries created by external developers or organizations, offering a range of components that developers can integrate into their applications.. \n\n[\n\nByteGoblin.io\n=============\n\n](/)\n\nVUE\n\nCustom vs Third-Party Component Libraries\n=========================================\n\nIn the early stages of a codebase lifecycle, creating a centralized component library for common components makes sense. By establishing consistent design guidelines and reusable components, teams can enhance development efficiency and maintainability. However, developers face a critical decision: should they build a custom component library or leverage existing third-party libraries? This article delves into the key considerations of both approaches, providing insights to help developers make informed decisions tailored to their project needs.\n\nUnderstanding Component Libraries\n---------------------------------\n\n### What is a Component Library?\n\nA component library is a collection of reusable UI components that can be implemented across various applications or projects. These components encapsulate design elements and functionality, promoting consistency and reducing redundancy in coding practices.\n\n### Types of Component Libraries\n\n*   **Custom Component Libraries:** Built from scratch by a development team to meet specific project requirements.\n    \n*   **Third-Party Component Libraries:** Pre-built libraries created by external developers or organizations, offering a range of components that developers can integrate into their applications.\n    \n\nBenefits of Custom Component Libraries\n--------------------------------------\n\nCreating a custom component library often suits projects where unique requirements and design specifications are critical.\n\n### Advantages:\n\n*   **Tailored Functionality:** Custom libraries allow developers to craft components that meet specific needs without unnecessary features.\n    \n*   **Consistency with Branding:** Customization ensures that components adhere to unique branding guidelines, providing a cohesive user experience.\n    \n*   **Better Control and Flexibility:** Developers have the freedom to modify, extend, and optimize components as the codebase evolves.\n    \n*   **Comprehensive Documentation:** A custom library provides the opportunity to create documentation specific to the team’s needs and technical stack, easing onboarding for new developers.\n    \n\n### Challenges:\n\n*   **Development Time:** Building libraries from scratch can require significant time and effort, potentially delaying project timelines.\n    \n*   **Initial Overhead:** Developers must consider architectural decisions, testing, and maintenance that come with creating a new library.\n    \n\nAdvantages of Third-Party Component Libraries\n---------------------------------------------\n\nThird-party component libraries can be excellent resources for fast-tracking development cycles and reducing workload.\n\n### Advantages:\n\n*   **Rapid Development:** These libraries often provide a wide range of ready-to-use components, enabling quicker application development.\n    \n*   **Community Support:** Popular libraries with active communities are backed by regular updates, bug fixes, and enhancements.\n    \n*   **Standardization:** Most third-party libraries follow widely accepted design standards (like Material Design or Bootstrap), enabling faster onboarding and easier collaboration across teams.\n    \n*   **Well-Tested Components:** Components in reputable libraries are often tested in production, reducing the likelihood of bugs in your application.\n    \n\n### Challenges:\n\n*   **Dependency Management:** Relying on third-party libraries can introduce vulnerabilities or lead to deprecated components if not actively maintained.\n    \n*   **Limited Customization:** Customizing third-party components can sometimes prove difficult, and modifications may lead to additional overhead.\n    \n*   **Overhead from Unused Features:** Third-party libraries may include a range of features that your project does not utilize, leading to increased bundle sizes.\n    \n\nKey Considerations in Choosing Between Custom and Third-Party Libraries\n-----------------------------------------------------------------------\n\nWhen determining whether to build a custom library or use third-party options, developers should weigh various factors.\n\n### Project Requirements\n\n*   Analyze the specific needs and complexities of your project.\n    \n*   Determine if off-the-shelf components will suffice or if bespoke functionality is essential.\n    \n\n### Development Resources\n\n*   Consider team expertise, available time, and man-hours for developing and maintaining library components.\n    \n*   Assess whether your team has the bandwidth to build and document a custom library.\n    \n\n### Long-Term Vision\n\n*   Explore how the library will fit into the ove",
                    "idx": "2-3"
                  },
                  {
                    "title": "Choosing Between Libraries and Frameworks: A Guide for Developers",
                    "url": "https://www.linkedin.com/pulse/choosing-between-libraries-frameworks-guide-developers-alam-aknkf",
                    "type": "website-preview",
                    "text": "Here's a comprehensive guide to help you decide the best path for your next project. ### Understanding Libraries and Frameworks. - Provide specific functionalities. - Offer greater.... \n\nLinkedIn and 3rd parties use essential and non-essential cookies to provide, secure, analyze and improve our Services, and to show you relevant ads (including **professional and job ads**) on and off LinkedIn. Learn more in our [Cookie Policy](https://www.linkedin.com/legal/cookie-policy).\n\nSelect Accept to consent or Reject to decline non-essential cookies for this use. You can update your choices at any time in your [settings](https://www.linkedin.com/mypreferences/g/guest-cookies).\n\nAccept Reject\n\n  \n\nAgree & Join LinkedIn\n\nBy clicking Continue to join or sign in, you agree to LinkedIn’s [User Agreement](/legal/user-agreement?trk=linkedin-tc_auth-button_user-agreement), [Privacy Policy](/legal/privacy-policy?trk=linkedin-tc_auth-button_privacy-policy), and [Cookie Policy](/legal/cookie-policy?trk=linkedin-tc_auth-button_cookie-policy).\n\nSign in to view more content\n----------------------------\n\nCreate your free account or sign in to continue your search\n\nSign in\n\nWelcome back\n------------\n\nEmail or phone\n\nPassword\n\n Show\n\n[Forgot password?](https://www.linkedin.com/uas/request-password-reset?trk=pulse-article_contextual-sign-in-modal_sign-in-modal_forgot_password)  Sign in\n\nor\n\nBy clicking Continue to join or sign in, you agree to LinkedIn’s [User Agreement](/legal/user-agreement?trk=pulse-article_contextual-sign-in-modal_sign-in-modal_auth-button_user-agreement), [Privacy Policy](/legal/privacy-policy?trk=pulse-article_contextual-sign-in-modal_sign-in-modal_auth-button_privacy-policy), and [Cookie Policy](/legal/cookie-policy?trk=pulse-article_contextual-sign-in-modal_sign-in-modal_auth-button_cookie-policy).\n\nNew to LinkedIn? [Join now](https://www.linkedin.com/signup/cold-join?session_redirect=%2Fpulse%2Fchoosing-between-libraries-frameworks-guide-developers-alam-aknkf&trk=pulse-article_contextual-sign-in-modal_sign-in-modal_join-link)\n\nor\n\nNew to LinkedIn? [Join now](https://www.linkedin.com/signup/cold-join?session_redirect=%2Fpulse%2Fchoosing-between-libraries-frameworks-guide-developers-alam-aknkf&trk=pulse-article_contextual-sign-in-modal_join-link)\n\nBy clicking Continue to join or sign in, you agree to LinkedIn’s [User Agreement](/legal/user-agreement?trk=linkedin-tc_auth-button_user-agreement), [Privacy Policy](/legal/privacy-policy?trk=linkedin-tc_auth-button_privacy-policy), and [Cookie Policy](/legal/cookie-policy?trk=linkedin-tc_auth-button_cookie-policy).\n\n[Skip to main content](#main-content)\n\n[LinkedIn](/?trk=article-ssr-frontend-pulse_nav-header-logo)\n\n*   [Articles](https://www.linkedin.com/pulse/topics/home/?trk=article-ssr-frontend-pulse_guest_nav_menu_articles)\n*   [People](https://www.linkedin.com/pub/dir/+/+?trk=article-ssr-frontend-pulse_guest_nav_menu_people)\n*   [Learning](https://www.linkedin.com/learning/search?trk=article-ssr-frontend-pulse_guest_nav_menu_learning)\n*   [Jobs](https://www.linkedin.com/jobs/search?trk=article-ssr-frontend-pulse_guest_nav_menu_jobs)\n*   [Games](https://www.linkedin.com/games?trk=article-ssr-frontend-pulse_guest_nav_menu_games)\n\n[Join now](https://www.linkedin.com/signup/cold-join?session_redirect=%2Fpulse%2Fchoosing-between-libraries-frameworks-guide-developers-alam-aknkf&trk=article-ssr-frontend-pulse_nav-header-join) [Sign in](https://www.linkedin.com/uas/login?session_redirect=%2Fpulse%2Fchoosing-between-libraries-frameworks-guide-developers-alam-aknkf&fromSignIn=true&trk=article-ssr-frontend-pulse_nav-header-signin)[](https://www.linkedin.com/uas/login?session_redirect=%2Fpulse%2Fchoosing-between-libraries-frameworks-guide-developers-alam-aknkf&fromSignIn=true&trk=article-ssr-frontend-pulse_nav-header-signin)\n\n\\### Choosing Between Libraries and Frameworks: A Guide for Developers\n======================================================================\n\n*   [Report this article](/uas/login?session_redirect=https%3A%2F%2Fwww.linkedin.com%2Fpulse%2Fchoosing-between-libraries-frameworks-guide-developers-alam-aknkf&trk=article-ssr-frontend-pulse_ellipsis-menu-semaphore-sign-in-redirect&guestReportContentType=PONCHO_ARTICLE&_f=guest-reporting)\n\n[Md. Shahadath Alam](https://bd.linkedin.com/in/mdshahadathalam)\n\n### Md. Shahadath Alam\n\n#### Refractory Engineer | Programming Enthusiast\n\nPublished Aug 18, 2024\n\n[\\+ Follow](https://www.linkedin.com/signup/cold-join?session_redirect=%2Fpulse%2Fchoosing-between-libraries-frameworks-guide-developers-alam-aknkf&trk=article-ssr-frontend-pulse_publisher-author-card)\n\n  \n\nWhen embarking on a new app development journey, one crucial decision you’ll face is whether to use a library or a framework. This choice significantly impacts your project's structure, development speed, and overall success. Here's a comprehensive guide to help you decide the best path for your next project.\n\n\\### Understanding Libraries and Frameworks\n\nLibra",
                    "idx": "2-4"
                  },
                  {
                    "title": "The Case Against Always Using Third-Party Libraries",
                    "url": "https://hemaks.org/posts/the-case-against-always-using-third-party-libraries/",
                    "type": "website-preview",
                    "text": "Third-party libraries often come with predefined functionalities that may not perfectly align with your specific needs. Customizing these libraries can be a daunting task, requiring significant effort and sometimes even rewriting parts of the library.. \n\n[Hemaks](https://hemaks.org/ \"Hemaks (Alt + H)\")\n\n*   |\n*   [ru](https://hemaks.org/ru/posts/the-case-against-always-using-third-party-libraries/ \"ru\")\n\n*   [tags](https://hemaks.org/tags/ \"tags\")\n*   [archive](https://hemaks.org/archives/ \"archive\")\n*   [](https://hemaks.org/search/ \"search (Alt + /)\")search\n\nThe Case Against Always Using Third-Party Libraries\n===================================================\n\nDecember 18, 2024 · 4 min · 815 words · Maxim Zhirnov | Translations:\n\n*   [](https://hemaks.org/ru/posts/the-case-against-always-using-third-party-libraries)ru\n\nTable of Contents\n\n*   [The Siren Song of Third-Party Libraries](#the-siren-song-of-third-party-libraries)\n*   [The Hidden Dangers](#the-hidden-dangers)\n    *   [Security Risks](#security-risks)\n    *   [Dependency Issues](#dependency-issues)\n    *   [Lack of Flexibility](#lack-of-flexibility)\n    *   [Unexpected Bugs](#unexpected-bugs)\n*   [Mitigating the Risks](#mitigating-the-risks)\n    *   [Vet Your Libraries](#vet-your-libraries)\n    *   [Manual Source Code Review](#manual-source-code-review)\n    *   [Use Short-Lived Dependencies](#use-short-lived-dependencies)\n*   [A Personal Anecdote](#a-personal-anecdote)\n*   [Diagram: Dependency Management Flow](#diagram-dependency-management-flow)\n*   [Conclusion](#conclusion)\n\nWhen it comes to software development, the allure of third-party libraries is hard to resist. They promise to save time, reduce costs, and accelerate the development process. However, beneath the surface of these benefits lies a complex web of potential pitfalls that can jeopardize the integrity, security, and maintainability of your software.\n\n### The Siren Song of Third-Party Libraries[#](#the-siren-song-of-third-party-libraries)\n\nThird-party libraries are like the sirens of the software world, luring developers with the promise of easy solutions to complex problems. They offer pre-written code that can be integrated into your project with minimal effort, allowing you to focus on other aspects of development. Here are some of the key advantages that make them so appealing:\n\n*   **Faster Development Process**: With third-party libraries, you don’t have to reinvent the wheel. The code is already written, tested, and often optimized, which significantly speeds up your development cycle\\[1\\].\n*   **Cost Savings**: Many third-party libraries are free or low-cost, especially for open-source options. This can be a huge boon for projects with limited budgets\\[1\\].\n\nHowever, these advantages come with a set of significant drawbacks that can make third-party libraries more of a liability than an asset.\n\n### The Hidden Dangers[#](#the-hidden-dangers)\n\n#### Security Risks[#](#security-risks)\n\nOne of the most critical concerns with third-party libraries is security. These libraries can introduce vulnerabilities into your application that you may not even be aware of. For instance, if a library has a security flaw, it can become a target for hackers, compromising your entire system. The infamous case of the sabotaged npm package that wiped files in Russia and Belarus is a stark reminder of these risks\\[1\\]\\[4\\].\n\n#### Dependency Issues[#](#dependency-issues)\n\nWhen you use third-party libraries, you are at the mercy of the library’s maintainers. Any breaking updates or changes in the library can disrupt your application, requiring immediate attention and potentially causing downtime. This dependency can be particularly problematic if the library is no longer maintained or if the maintainers decide to change the API in a way that breaks your code\\[1\\].\n\n#### Lack of Flexibility[#](#lack-of-flexibility)\n\nThird-party libraries often come with predefined functionalities that may not perfectly align with your specific needs. Customizing these libraries can be a daunting task, requiring significant effort and sometimes even rewriting parts of the library. This inflexibility can limit your ability to innovate and tailor the software to your exact requirements\\[1\\].\n\n#### Unexpected Bugs[#](#unexpected-bugs)\n\nEven well-maintained libraries can have edge cases that cause unexpected bugs. These bugs can be particularly challenging to debug because they are buried deep within the library’s codebase. The time and effort required to identify and fix these issues can be substantial, often outweighing the initial time saved by using the library\\[1\\].\n\n### Mitigating the Risks[#](#mitigating-the-risks)\n\nWhile the risks associated with third-party libraries are real, they are not insurmountable. Here are some strategies to help mitigate these risks:\n\n#### Vet Your Libraries[#](#vet-your-libraries)\n\nBefore integrating a third-party library, it is crucial to vet it thoroughly. Check the library’s reputat",
                    "idx": "2-5"
                  },
                  {
                    "title": "To Build or Not to Build: The Dilemma of Third-Party Libraries vs ...",
                    "url": "https://www.fundamental.bg/feed/to-build-or-not-to-build-the-dilemma-of-third-party-libraries-vs-custom-code",
                    "type": "website-preview",
                    "text": "When choosing between third-party libraries and custom code, consider your project's specific needs, timeline, and budget. Sometimes a hybrid approach works best, using libraries for standard functionalities and custom code for core business logic that differentiates your application in the market.. ",
                    "idx": "2-6"
                  },
                  {
                    "title": "Selecting third-party libraries: the practitioners’ perspective ...",
                    "url": "https://dl.acm.org/doi/10.1145/3368089.3409711",
                    "type": "website-preview",
                    "text": "We systematically devised a comprehensive set of 26 technical, human, and economic factors that developers take into consideration when selecting a software library. Eight of these factors are new to the literature. We explain each of these factors and how they play a role in the decision.. ",
                    "idx": "2-7"
                  },
                  {
                    "title": "Working with Third-Party Libraries and Frameworks: A Comprehensive ...",
                    "url": "https://algocademy.com/blog/working-with-third-party-libraries-and-frameworks-a-comprehensive-guide/",
                    "type": "website-preview",
                    "text": "Working effectively with third-party libraries and frameworks is an essential skill for modern software development. By following a strategic approach to selection, integration, and maintenance, you can leverage external code to accelerate development while minimizing risks.. \n\n[](https://algocademy.com/blog/)\n\n[Start Coding for FREE](https://algocademy.com)\n\nWorking with Third-Party Libraries and Frameworks: A Comprehensive Guide\n========================================================================\n\nIn the modern software development landscape, third-party libraries and frameworks have become essential tools for developers. They provide pre-built solutions to common problems, help standardize code, and significantly reduce development time. Whether you’re building a web application, mobile app, or desktop software, knowing how to effectively work with external dependencies is a crucial skill.\n\nThis comprehensive guide explores everything you need to know about working with third-party libraries and frameworks, from selection to implementation and maintenance.\n\nTable of Contents\n-----------------\n\n1.  [Understanding Third-Party Libraries and Frameworks](#understanding)\n2.  [Selecting the Right Libraries and Frameworks](#selecting)\n3.  [Working with Package Managers](#package-managers)\n4.  [Integration Strategies](#integration)\n5.  [Security Considerations](#security)\n6.  [Performance Optimization](#performance)\n7.  [Dependency Management](#dependency-management)\n8.  [Testing with Third-Party Components](#testing)\n9.  [Documentation and Learning Resources](#documentation)\n10.  [Troubleshooting Common Issues](#troubleshooting)\n11.  [Best Practices](#best-practices)\n12.  [Conclusion](#conclusion)\n\nUnderstanding Third-Party Libraries and Frameworks\n--------------------------------------------------\n\nBefore diving into the practical aspects, it’s important to understand what third-party libraries and frameworks are and how they differ.\n\n### Libraries vs. Frameworks\n\n**Libraries** are collections of pre-written code that provide specific functionality. They are imported into your project and called upon when needed. You maintain control over the application flow and decide when to use the library’s functions.\n\nExamples of popular libraries include:\n\n*   Lodash (JavaScript utility library)\n*   Requests (Python HTTP library)\n*   Retrofit (Java/Android networking library)\n*   NumPy (Python numerical computing library)\n\n**Frameworks** provide a structure or skeleton for your application. Unlike libraries, frameworks control the flow of the application and call your code when needed (this is known as inversion of control). They typically offer more comprehensive solutions and enforce certain patterns and architectures.\n\nExamples of popular frameworks include:\n\n*   React and Angular (JavaScript frontend frameworks)\n*   Django and Flask (Python web frameworks)\n*   Spring (Java application framework)\n*   Ruby on Rails (Ruby web framework)\n\n### Benefits of Using Third-Party Components\n\n*   **Development Speed:** Avoid reinventing the wheel by leveraging existing solutions\n*   **Code Quality:** Many libraries are well-tested and maintained by communities\n*   **Standardization:** Following established patterns improves code readability\n*   **Focus:** Concentrate on building your core business logic rather than infrastructure\n*   **Community Support:** Access to documentation, tutorials, and forums\n\n### Potential Drawbacks\n\n*   **Dependency Risk:** Reliance on code you don’t control\n*   **Learning Curve:** Time investment to learn new APIs\n*   **Bloat:** Unused features can increase application size\n*   **Version Compatibility:** Updates may introduce breaking changes\n*   **Security Concerns:** Potential vulnerabilities in third-party code\n\nSelecting the Right Libraries and Frameworks\n--------------------------------------------\n\nChoosing appropriate third-party components is crucial for project success. Here are key factors to consider:\n\n### Evaluation Criteria\n\n*   **Project Activity:** Check when the last update was made. Regularly maintained projects are less likely to contain unpatched bugs or security issues.\n*   **Community Size:** A large community often means better support, more resources, and faster bug fixes.\n*   **Documentation Quality:** Comprehensive documentation makes implementation and troubleshooting easier.\n*   **License Compatibility:** Ensure the license aligns with your project’s requirements, especially for commercial applications.\n*   **Performance Metrics:** Consider the performance impact, particularly for mobile or resource-constrained applications.\n*   **API Stability:** Libraries with frequent breaking changes can cause maintenance headaches.\n*   **Security History:** Check for past vulnerabilities and how quickly they were addressed.\n\n### Research Methods\n\n*   **GitHub Metrics:** Stars, forks, issues, and pull requests can indicate popularity and activity.\n*   **Package Repository Stats:** D",
                    "idx": "2-8"
                  },
                  {
                    "title": "What are the best practices for integrating custom software development ...",
                    "url": "https://users.rust-lang.org/t/what-are-the-best-practices-for-integrating-custom-software-development-features-into-a-rust-based-application/116293",
                    "type": "website-preview",
                    "text": "What are some effective strategies for integrating third-party libraries or developing custom modules within the Rust ecosystem? Any insights on debugging, testing, and maintaining these features in a Rust application would be highly valuable.. \n\nhtml { overflow-y: revert !important; } #d-splash { display: none; }\n\n                          \n\n[The Rust Programming Language Forum](/)\n\n[What are the best practices for integrating custom software development features into a Rust-based application?](/t/what-are-the-best-practices-for-integrating-custom-software-development-features-into-a-rust-based-application/116293)\n===========================================================================================================================================================================================================================================\n\n    \n\n[harrywillson](https://users.rust-lang.org/u/harrywillson)  August 20, 2024, 7:53pm  1\n\nI’m developing a Rust-based application and looking to integrate custom software development features to enhance its functionality. I’m interested in understanding the best practices for incorporating these custom features, including how to manage dependencies, handle asynchronous operations, and ensure performance and reliability. What are some effective strategies for integrating third-party libraries or developing custom modules within the Rust ecosystem? Any insights on debugging, testing, and maintaining these features in a Rust application would be highly valuable.\n\n \n\n[steffahn](https://users.rust-lang.org/u/steffahn) August 20, 2024, 11:02pm  2\n\nHi and welcome. You’re asking a relatively broad question. Perhaps the best answer is just some pointers on where you can read more.\n\n![](https://avatars.discourse-cdn.com/v4/letter/h/a8b319/48.png) harrywillson:\n\n> how to manage dependencies\n\n![](https://avatars.discourse-cdn.com/v4/letter/h/a8b319/48.png) harrywillson:\n\n> What are some effective strategies for integrating third-party libraries or developing custom modules within the Rust ecosystem?\n\nThe most commonly recommended learning resource for Rust ist [the book “The Rust Programming Language”](https://doc.rust-lang.org/book/title-page.html). It also covers some introduction on how to use the module system, crates, and dependencies.\n\nFirst in the early example chapter 2, there’s [a section](https://doc.rust-lang.org/book/ch02-00-guessing-game-tutorial.html#generating-a-secret-number) where an external crate is used. Later in the book, there’s a whole [chapter on the module system and crates](https://doc.rust-lang.org/book/ch07-00-managing-growing-projects-with-packages-crates-and-modules.html). And even later, a [chapter on the cargo tool and crates.io](https://doc.rust-lang.org/book/ch14-00-more-about-cargo.html).\n\nFor even more details, there’s a [whole documentation book for Cargo](https://doc.rust-lang.org/cargo/guide/why-cargo-exists.html), and you can find [documentation for every crates.io package](https://docs.rs/) online, too.\n\nIf anything else is unclear, ask more concrete questions on what you’re struggling with.\n\n![](https://avatars.discourse-cdn.com/v4/letter/h/a8b319/48.png) harrywillson:\n\n> handle asynchronous operations, and ensure performance and reliability\n\n![](https://avatars.discourse-cdn.com/v4/letter/h/a8b319/48.png) harrywillson:\n\n> Any insights on debugging, testing, and maintaining these features in a Rust application would be highly valuable\n\nThat’s basically just asking “how to use Rust”, right? You need to become more concrete than that. You can learn most of the very basics through the book, as demonstrated above, where I’ve linked to some pages about modules/crates/dependencies specifically. testing also has a chapter IIRC; async Rust is more advanced, but there are other online resources to learn more about it.\n\nPerformance and reliability is ultimately simply a question of being somewhat decent at software engineering … people study at universities and/or learn through years of practical experience to master this, this isn’t something magically explained in a forum answer. That said, Rust as a language does have some properties that make it _easier_ to achieve good performance and reliability. To learn a little bit more about _why_ that is the case, [here’s a good presentation](https://www.youtube.com/watch?v=DnT-LUQgc7s).\n\n  3 Likes\n\n### Related topics\n\nTopic\n\nReplies\n\nViews\n\nActivity\n\n [Tips and experiences integrating Rust into other projects?](https://users.rust-lang.org/t/tips-and-experiences-integrating-rust-into-other-projects/12091)\n\n[help](/c/help/5)\n\n13\n\n5070\n\nJanuary 12, 2023\n\n [Using different features for regular build and test build](https://users.rust-lang.org/t/using-different-features-for-regular-build-and-test-build/5510)\n\n[help](/c/help/5)\n\n6\n\n1702\n\nJanuary 12, 2023\n\n [Using rust as a part of bigger project](https://users.rust-lang.org/t/using-rust-as-a-part-of-bigger-project/1354)\n\n[help](/c/help/5)\n\n5\n\n1555\n\nJa",
                    "idx": "2-9"
                  }
                ]
              }
            }
          ]
        },
        {
          "role": "assistant",
          "content": "Basierend auf meiner Analyse des Newstextes ordne ich ihn folgenden Kategorien zu:\n\n## **programming** - Relevanz: 8/10\nDer Text behandelt ein fundamentales Thema der Softwareentwicklung: die Entscheidung zwischen Third-Party-Bibliotheken und eigener Implementierung 【2-0】【2-1】. Dies ist für alle Programmierer hochrelevant, da es Entwicklungszeit, Wartbarkeit und Projektarchitektur maßgeblich beeinflusst.\n\n## **work** - Relevanz: 6/10  \nDer Artikel diskutiert wichtige Arbeitsaspekte wie Zeitmanagement, Projektplanung und Teameffizienz in der Softwareentwicklung 【2-2】【2-3】. Die Entscheidung zwischen eigener Entwicklung und fertigen Lösungen hat direkten Einfluss auf Arbeitsabläufe und Produktivität.\n\n## **security** - Relevanz: 4/10\nObwohl nicht explizit erwähnt, sind Sicherheitsaspekte bei Third-Party-Bibliotheken ein wichtiger Faktor 【2-1】【2-5】. Der Text behandelt dies nur implizit durch die Erwähnung \"well tested and optimized\" Libraries, weshalb die Relevanz moderater ausfällt.\n\nDie anderen Kategorien (ai, databases, data protection, copyright) sind nicht relevant, da der Text diese Themen nicht behandelt oder nur sehr indirekt berührt.",
          "id": "a6e813a1-d75b-4d0d-8349-9f41af124228"
        }
      ],
      "formattedResult": [
        [
          {
            "name": "programming",
            "reasoning": "Der Text behandelt ein fundamentales Thema der Softwareentwicklung: die Entscheidung zwischen Third-Party-Bibliotheken und eigener Implementierung. Dies ist für alle Programmierer hochrelevant, da es Entwicklungszeit, Wartbarkeit und Projektarchitektur maßgeblich beeinflusst.",
            "relevance": 8
          },
          {
            "name": "work",
            "reasoning": "Der Artikel diskutiert wichtige Arbeitsaspekte wie Zeitmanagement, Projektplanung und Teameffizienz in der Softwareentwicklung. Die Entscheidung zwischen eigener Entwicklung und fertigen Lösungen hat direkten Einfluss auf Arbeitsabläufe und Produktivität.",
            "relevance": 6
          },
          {
            "name": "security",
            "reasoning": "Obwohl nicht explizit erwähnt, sind Sicherheitsaspekte bei Third-Party-Bibliotheken ein wichtiger Faktor. Der Text behandelt dies nur implizit durch die Erwähnung 'well tested and optimized' Libraries, weshalb die Relevanz moderater ausfällt.",
            "relevance": 4
          }
        ]
      ]
    }
  }
}