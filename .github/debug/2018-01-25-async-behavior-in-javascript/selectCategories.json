{
  "request": {
    "output": {
      "type": "array",
      "schema": {
        "type": "array",
        "items": {
          "type": "object",
          "required": [
            "name",
            "relevance"
          ],
          "properties": {
            "name": {
              "type": "string"
            },
            "relevance": {
              "type": "number"
            },
            "reasoning": {
              "type": "string"
            }
          }
        }
      }
    },
    "prompt": "\nDu bist ein technischer News-Kategorisierungsassistent mit Fachkenntnissen in IT, Künstlicher Intelligenz, Programmierung, Datenbanken, Arbeitswelt und rechtlichen Themen.\nDeine Aufgabe ist es, einen gegebenen Newstext den passenden Kategorien zuzuordnen und für jede Kategorie eine Relevanz zwischen 1 (nur für Spezialinteressierte) und 10 (bahnbrechend, für alle relevant) zu vergeben.\n\nDie Kategorien werden dir als Markdown-Liste vorgegeben.\nGehe folgendermaßen vor:\n1. Analysiere den Newstext.\n2. Wähle alle passenden Kategorien.\n3. Vergib für jede gewählte Kategorie eine Relevanz von 1 bis 10 und begründe deine Einstufung in einem Satz.\n\nHier ist die Kategorien-Liste:\n- ai\n- programming\n- databases\n- security\n- work\n- data protection\n- copyright\n\nHier ist der Newstext:\n# async behavior in JavaScript\n\n\nUnderstanding the async behavior is one of the largest milestone in learning JavaScript. I will give you a very first overview what it is.\n\n<!--more-->\n\n## Procedural code\n\nJavaScript is a language which supports procedural code. What does this mean? It means just the code runs line by line:\n\n```javascript\nconst variable;\nvariable = 'example';\nconsole.log(variable);\n```\n\nThe order what happens is easy to understand:\n\n* The variable gets defined\n* It gets assigned with `example`\n* It gets logged out to the console\n\n## Event loop and process.nextTick()\n\nBut procedural is not all, JavaScript have an event loop. It runs all the code line by line, have a look if there is something next in the event loop, runs this code line by line and so on:\n\n```javascript\nconsole.log('1');\nprocess.nextTick(() => {\n  console.log('3');\n});\nconsole.log('2');\n```\n\nThe order the code runs now is not anymore the same order we wrote the lines:\n\n* First `1` gets logged\n* Then we add a function to the end of the event loop\n* `2` gets logged\n* The current loop is over, JavaScript look at the event loop, find and run our\n  function we added, `3` gets logged\n\nThis is what single threaded and non blocking means. The code run in a single thread, only one part of the code can run at the same time. But its possible to add something to the end of the event loop without blocking the followed code.\n\n## Async behavior\n\nWith this in mind we now better understand how async behaves:\n\n```javascript\nlet user;\ndb.findUserById(1, record => {\n  user = record;\n});\nconsole.log(user);\n```\n\nWe get an `undefined`, because `db.findUserById()` add the callback at the end of the event loop. So the `console.log(user)` runs before the callback which assign user to the record.\n\n### Event driven\n\nIn the last example we got in touch with another concept named event driven. The `db.findUserById()` will not run immediately at the end of the event loop, because the database need some time to find the user. It register an event which will be triggered after the user is found. But that doesn't change the async behavior, because also if the database is fast enough to find the user, the callback can't run before the current code in the event loop is finished.\n\n## Summary\n\nIt's a very important step to understand async and start to think about which functions runs async and which code runs in which order.\n\nRead more about how to [write async code in JavaScript](/2018/02/02/write-async-code-in-javascript.html).\n\n    ",
    "timestamp": "2025-07-04T13:28:54.798Z"
  },
  "response": {
    "data": {
      "result": [
        {
          "role": "assistant",
          "content": [
            {
              "type": "tool-call",
              "toolCallId": "toolu_vrtx_01FEjur4F8QfFmrSn3a3h4BT",
              "toolName": "web_search",
              "args": {
                "query": "JavaScript async behavior programming tutorial 2024"
              }
            }
          ],
          "id": "96d58aec-4e2b-4fae-9c61-220051a99736"
        },
        {
          "role": "tool",
          "id": "162bd9d2-1ea8-4627-ab52-c8ae595c338a",
          "content": [
            {
              "type": "tool-result",
              "toolCallId": "toolu_vrtx_01FEjur4F8QfFmrSn3a3h4BT",
              "toolName": "web_search",
              "result": {
                "input": "JavaScript async behavior programming tutorial 2024",
                "output": [
                  {
                    "title": "Asynchronous Programming in JavaScript – Callbacks, Promises, & Async ...",
                    "url": "https://www.freecodecamp.org/news/asynchronous-programming-in-javascript-examples/",
                    "type": "website-preview",
                    "text": "Asynchronous programming in JavaScript is used to make tasks in a program run concurrently and uses techniques such as callbacks, Promise, or async / await. This article explains how to use these asynchronous programming techniques and how to handle errors with them.. \n\nTitle: Asynchronous Programming in JavaScript – Callbacks, Promises, & Async/Await Examples\n\nURL Source: https://www.freecodecamp.org/news/asynchronous-programming-in-javascript-examples/\n\nPublished Time: 2024-02-02T16:04:52.000Z\n\nMarkdown Content:\n![Image 1: Asynchronous Programming in JavaScript – Callbacks, Promises, & Async/Await Examples](https://www.freecodecamp.org/news/content/images/size/w2000/2024/02/Await-2.png)\nAll programming languages have runtime engines that execute their code. In JavaScript, the runtime engine is single-threaded, which means that it runs code line by line or sequentially.\n\nThe JavaScript runtime engine makes it a synchronous programming language where programs run sequentially. Programming languages that are not synchronous are called asynchronous programming languages, which are programming languages where programs run concurrently.\n\nAlthough JavaScript is synchronous, you can perform asynchronous programming with it. In this article, you will learn about asynchronous programming in JavaScript and how to use it.\n\nAsynchronous programming is a technique that allows your program to run its tasks concurrently. You can compare asynchronous programming to a chef with multiple cookers, pots, and kitchen utensils. This chef will be able to cook various dishes at a time.\n\nAsynchronous programming makes your JavaScript programs run faster, and you can perform asynchronous programming with any of these:\n\n*   Callbacks\n\n*   Promises\n\n*   Async/Await\n\nIn the upcoming sections, you will learn about these techniques and how to use them.\n\nCallbacks\n---------\n\nA callback is a function used as an argument in another function. Callbacks allow you to create asynchronous programs in JavaScript by passing the result of a function into another function.\n\n```\nfunction greet(name) {\n    console.log(`Hi ${name}, how do you do?`);\n}\n\nfunction displayGreeting(callback) {\n    let name = prompt(\"Please enter your name\");\n    callback(name);\n};\n\ndisplayGreeting(greet);\n```\n\nIn the code above, the `greet` function is used to log a greeting to the console, and it needs the name of the person to be greeted.\n\nThe `displayGreeting` function gets the person's name and has a callback that passes the name as an argument to the `greet` function while calling it. Then the `displayGreeting` function is called with the greet function passed to it as an argument.\n\n### Callback hell\n\nAlthough callbacks make it easy to control and make your program asynchronous, you'll eventually run into a problem called callback hell while using them.\n\nThis problem arises when you perform multiple asynchronous tasks with callbacks, which might result in nesting callbacks in callbacks.\n\nHere's an example:\n\n```\nfunction greet(callback) {\n    setTimeout(function() {\n        console.log(\"Hi Musab\");\n        callback();\n    }, 1000);\n}\n\nfunction introduce(callback) {\n    setTimeout(function() {\n        console.log(\"I am your academic advisor\");\n        callback();\n    }, 1000);\n}\n\nfunction question(callback) {\n    setTimeout(function() {\n        console.log(\"Are you currently facing any challenge in your academics\");;\n        callback();\n    }, 1000);\n}\n\n// callback hell\ngreet(function() {\n    introduce(function() {\n        question(function() {\n            console.log(\"Done\");\n        });\n    });\n});\n```\n\nIn the code above, the `greet`, `introduce`, and `question` functions are nested to create a callback hell, which makes error handling difficult. You should change your asynchronous programming technique from callbacks to `Promise` to avoid the callback hell.\n\nPromise\n-------\n\nMost programs consist of a producing code that performs a time-consuming task and a consuming code that needs the result of the producing code.\n\nA `Promise` links the producing and the consuming code together. In the example below, the `displayGreeting` function is the producing code while the `greet` function is the consuming code.\n\n```\nlet name;\n\n// producing code\nfunction displayGreeting(callback) {\n    name = prompt(\"Please enter your name\");\n}\n\n// consuming code\nfunction greet(name) {\n    console.log(`Hi ${name}, how do you do?`);\n}\n```\n\nIn the example below, the `new Promise` syntax creates a new `Promise`, which takes a function that executes the producing code. The function either resolves or rejects its task and assigns the `Promise` to a variable named `promise`.\n\nIf the producing code resolves, its result will be passed to the consuming code through the `.then` handler.\n\n```\nlet name;\n\nfunction displayGreeting() {\n    name = prompt(\"Please enter your name\");\n}\n\nlet promise = new Promise(function(resolve, reject) {\n    // the producing code\n    displayGreeting();\n    resolve(name)\n});\n\n",
                    "idx": "2-0"
                  },
                  {
                    "title": "JavaScript Async - W3Schools",
                    "url": "https://www.w3schools.com/Js/js_async.asp",
                    "type": "website-preview",
                    "text": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, Python, PHP, Bootstrap, Java, XML and more.. \n\n[](https://www.w3schools.com \"Home\")\n\n[Tutorials](javascript:void\\(0\\) \"Tutorials and References\") [Exercises](javascript:void\\(0\\) \"Exercises and Quizzes\") [Certificates](javascript:void\\(0\\) \"Certificates\") [Services](javascript:void\\(0\\) \"Our Services\")\n\n[Menu](javascript:void\\(0\\) \"Menu\")\n\nSearch field \n\n_×_\n\n[__](javascript:void\\(0\\); \"Toggle light/dark mode\")\n\nSign In\n\n[★ +1](https://profile.w3schools.com/log-in \"Your W3Schools Profile\") [Get Certified](https://campus.w3schools.com/collections/course-catalog \"W3Schools Certificates\") [For Teachers](/academy/index.php \"Contact us about W3Schools Academy for educational institutions\") [Spaces](/spaces/index.php \"Get Your Own Website With W3Schools Spaces\") [Plus](/plus/index.php \"Become a PLUS user and unlock powerful features\") [Get Certified](https://campus.w3schools.com/collections/course-catalog \"W3Schools Certificates\") [For Teachers](/academy/index.php \"Contact us about W3Schools Academy for educational institutions\") [Spaces](https://spaces.w3schools.com/space/ \"Go to Your W3Schools Space\") [Plus](/plus/index.php \"Get personalized learning journey based on your current skills and goals\")\n\n[My W3Schools](https://pathfinder.w3schools.com \"My W3Schools\")\n\nTutorials\n\nExercises\n\nCertificates\n\nServices\n\n[Spaces](/spaces/index.php \"Get Your Own Website With W3Schools Spaces\") [Get Certified](https://campus.w3schools.com/collections/course-catalog \"W3Schools Certificates\") [Plus](/plus/index.php \"Become a PLUS user and unlock powerful features\") [Academy](/academy/index.php \"W3Schools Academy\") [Logout](https://profile.w3schools.com/logout \"Logout\")\n\n[](https://www.youtube.com/@w3schools \"W3Schools on YouTube\")[__](https://www.linkedin.com/company/w3schools.com/ \"W3Schools on LinkedIn\") [__](https://discord.com/invite/w3schools \"Join the W3schools community on Discord\") [__](https://www.facebook.com/w3schoolscom/ \"W3Schools on Facebook\") [__](https://www.instagram.com/w3schools.com_official/ \"W3Schools on Instagram\")\n\n×\n\n**Tutorials**\n-------------\n\nTutorials filter input \n\n×\n\n### HTML and CSS\n\n[Learn HTML](/html/default.asp \"HTML Tutorial\") [Tutorial](/html/default.asp \"HTML Tutorial\") [Reference](/tags/default.asp \"HTML Reference\")\n\n[Learn CSS](/css/default.asp \"CSS Tutorial\") [Tutorial](/css/default.asp \"CSS Tutorial\") [Reference](/cssref/default.asp \"CSS Reference\")\n\n[Learn RWD](/css/css_rwd_intro.asp \"Responsive Web Design Tutorial\") [Tutorial](/css/css_rwd_intro.asp \"Responsive Web Design Tutorial\")\n\n[Learn Bootstrap](/bootstrap/bootstrap_ver.asp \"Bootstrap Tutorials\") [Overview](/bootstrap/bootstrap_ver.asp \"Bootstrap Tutorials\")\n\n[Learn W3.CSS](/w3css/default.asp \"W3.CSS Tutorial\") [Tutorial](/w3css/default.asp \"W3.CSS Tutorial\") [Reference](/w3css/w3css_references.asp \"W3.CSS Reference\")\n\n[Learn Sass](/sass/default.php \"SASS Tutorial\") [Tutorial](/sass/default.php \"SASS Tutorial\") [Reference](/sass/sass_functions_string.php \"SASS Reference\")\n\n[Learn Colors](/colors/default.asp \"Colors Tutorial\") [Tutorial](/colors/default.asp \"Colors Tutorial\") [Reference](/colors/colors_fs595.asp \"Colors Reference\")\n\n[Learn Icons](/icons/default.asp \"Icons Tutorial\") [Tutorial](/icons/default.asp \"Icons Tutorial\") [Reference](/icons/icons_reference.asp \"Icons Reference\")\n\n[Learn SVG](/graphics/svg_intro.asp \"SVG Tutorial\") [Tutorial](/graphics/svg_intro.asp \"SVG Tutorial\") [Reference](/graphics/svg_reference.asp \"SVG Reference\")\n\n[Learn Canvas](/graphics/canvas_intro.asp \"Canvas Tutorial\") [Tutorial](/graphics/canvas_intro.asp \"Canvas Tutorial\") [Reference](/graphics/canvas_reference.asp \"Canvas Reference\")\n\n[Learn Graphics](/graphics/default.asp \"Graphics Tutorial\") [Tutorial](/graphics/default.asp \"Graphics Tutorial\")\n\n[Learn Character Sets](/charsets/default.asp \"Character Sets Reference\") [Reference](/charsets/default.asp \"Character Sets Reference\")\n\n[Learn How To](/howto/default.asp \"How To - Code Snippets\") [Tutorial](/howto/default.asp \"How To - Code Snippets\")\n\n### Data Analytics\n\n[Learn AI](/ai/default.asp \"Artificial Intelligence Tutorial\") [Tutorial](/ai/default.asp \"Artificial Intelligence Tutorial\")\n\n[Learn Generative AI](/gen_ai/index.php \"Generative AI Tutorial\") [Tutorial](/gen_ai/index.php \"Generative AI Tutorial\")\n\n[Learn ChatGPT-3.5](/gen_ai/chatgpt-3-5/index.php \"ChatGPT-3.5 Tutorial\") [Tutorial](/gen_ai/chatgpt-3-5/index.php \"ChatGPT-3.5  Tutorial\")\n\n[Learn ChatGPT-4](/gen_ai/chatgpt-4/index.php \"ChatGPT-4 Tutorial\") [Tutorial](/gen_ai/chatgpt-4/index.php \"ChatGPT-4 Tutorial\")\n\n[Learn Google Bard](/gen_ai/bard/index.php \"Google Bard Tutorial\") [Tutorial](/gen_ai/bard/index.php \"Google Bard Tutorial\")\n\n[Learn Machine Learning](/python/python_ml_getting_started.asp \"Machine Learning Tutorial\") [Tutorial](/python/python_ml_getting_started.asp \"Machine Learning Tutorial\"",
                    "idx": "2-1"
                  },
                  {
                    "title": "Asynchronous JavaScript - Learn web development | MDN",
                    "url": "https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Async_JS",
                    "type": "website-preview",
                    "text": "In this module, we take a look at asynchronous JavaScript, why it is important, and how it can be used to effectively handle potential blocking operations, such as fetching resources from a server.. \n\n*   [Skip to main content](#content)\n*   [Skip to search](#top-nav-search-input)\n*   [Skip to select language](#languages-switcher-button)\n\n[](/en-US/)Open main menu\n\n*   References[References](/en-US/docs/Web)\n    *   [\n        \n        Overview / Web Technology\n        \n        Web technology reference for developers\n        \n        \n        \n        ](/en-US/docs/Web)\n    *   [\n        \n        HTML\n        \n        Structure of content on the web\n        \n        \n        \n        ](/en-US/docs/Web/HTML)\n    *   [\n        \n        CSS\n        \n        Code used to describe document style\n        \n        \n        \n        ](/en-US/docs/Web/CSS)\n    *   [\n        \n        JavaScript\n        \n        General-purpose scripting language\n        \n        \n        \n        ](/en-US/docs/Web/JavaScript)\n    *   [\n        \n        HTTP\n        \n        Protocol for transmitting web resources\n        \n        \n        \n        ](/en-US/docs/Web/HTTP)\n    *   [\n        \n        Web APIs\n        \n        Interfaces for building web applications\n        \n        \n        \n        ](/en-US/docs/Web/API)\n    *   [\n        \n        Web Extensions\n        \n        Developing extensions for web browsers\n        \n        \n        \n        ](/en-US/docs/Mozilla/Add-ons/WebExtensions)\n    *   [\n        \n        Accessibility\n        \n        Build web projects usable for all\n        \n        \n        \n        ](/en-US/docs/Web/Accessibility)\n    *   [\n        \n        Web Technology\n        \n        Web technology reference for developers\n        \n        \n        \n        ](/en-US/docs/Web)\n*   Learn[Learn](/en-US/docs/Learn_web_development)\n    *   [\n        \n        Overview / MDN Learning Area\n        \n        Learn web development\n        \n        \n        \n        ](/en-US/docs/Learn_web_development)\n    *   [\n        \n        MDN Learning Area\n        \n        Learn web development\n        \n        \n        \n        ](/en-US/docs/Learn_web_development)\n    *   [\n        \n        HTML\n        \n        Learn to structure web content with HTML\n        \n        \n        \n        ](/en-US/docs/Learn_web_development/Core/Structuring_content)\n    *   [\n        \n        CSS\n        \n        Learn to style content using CSS\n        \n        \n        \n        ](/en-US/docs/Learn_web_development/Core/Styling_basics)\n    *   [\n        \n        JavaScript\n        \n        Learn to run scripts in the browser\n        \n        \n        \n        ](/en-US/docs/Learn_web_development/Core/Scripting)\n    *   [\n        \n        Accessibility\n        \n        Learn to make the web accessible to all\n        \n        \n        \n        ](/en-US/docs/Learn_web_development/Core/Accessibility)\n*   Plus[Plus](/en-US/plus)\n    *   [\n        \n        Overview\n        \n        A customized MDN experience\n        \n        \n        \n        ](/en-US/plus)\n    *   [\n        \n        AI Help\n        \n        Get real-time assistance and support\n        \n        \n        \n        ](/en-US/plus/ai-help)\n    *   [\n        \n        Updates\n        \n        All browser compatibility updates at a glance\n        \n        \n        \n        ](/en-US/plus/updates)\n    *   [\n        \n        Documentation\n        \n        Learn how to use MDN Plus\n        \n        \n        \n        ](/en-US/plus/docs/features/overview)\n    *   [\n        \n        FAQ\n        \n        Frequently asked questions about MDN Plus\n        \n        \n        \n        ](/en-US/plus/docs/faq)\n*   [Curriculum New](/en-US/curriculum/)\n*   [Blog](/en-US/blog/)\n*   Tools\n    *   [\n        \n        Playground\n        \n        Write, test and share your code\n        \n        \n        \n        ](/en-US/play)\n    *   [\n        \n        HTTP Observatory\n        \n        Scan a website for free\n        \n        \n        \n        ](/en-US/observatory)\n    *   [\n        \n        AI Help\n        \n        Get real-time assistance and support\n        \n        \n        \n        ](/en-US/plus/ai-help)\n\nSearch MDNClear search inputSearch\n\nTheme\n\n*   [Log in](/users/fxa/login/authenticate/?next=%2Fen-US%2Fdocs%2FLearn_web_development%2FExtensions%2FAsync_JS)\n*   [Sign up for free](/users/fxa/login/authenticate/?next=%2Fen-US%2Fdocs%2FLearn_web_development%2FExtensions%2FAsync_JS)\n\n1.  [Learn](/en-US/docs/Learn_web_development)\n2.  [Extension modules](/en-US/docs/Learn_web_development/Extensions)\n3.  [Asynchronous JavaScript](/en-US/docs/Learn_web_development/Extensions/Async_JS)\n\nArticle Actions\n\n*   English (US)\n    \n    *   Remember language[](https://github.com/orgs/mdn/discussions/739 \"Enable this setting to automatically switch to this language when it's available. (Click to learn more.)\")\n        \n    *   [Deutsch](/de/docs/Learn_web_development/Extensions/Async_JS)\n    *   [Español](/es/docs/Learn_web_de",
                    "idx": "2-2"
                  },
                  {
                    "title": "Asynchronous Programming in JavaScript: A Friendly Guide",
                    "url": "https://medium.com/@aryan.dev/asynchronous-programming-in-javascript-callbacks-promises-and-async-await-19bb4e9c48db",
                    "type": "website-preview",
                    "text": "In this article, we’ll dive deep into the key concepts of asynchronous programming in JavaScript — callbacks, promises, and async-await — and show how to use them effectively to manage.... \n\n[Sitemap](/sitemap/sitemap.xml)\n\n[Open in app](https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F19bb4e9c48db&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderUser&%7Estage=mobileNavBar&source=post_page---top_nav_layout_nav-----------------------------------------)\n\nSign up\n\n[Sign in](/m/signin?operation=login&redirect=https%3A%2F%2Fmedium.com%2F%40aryan.dev%2Fasynchronous-programming-in-javascript-callbacks-promises-and-async-await-19bb4e9c48db&source=post_page---top_nav_layout_nav-----------------------global_nav------------------)\n\n[](/?source=post_page---top_nav_layout_nav-----------------------------------------)\n\n[\n\nWrite\n\n\n\n](/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---top_nav_layout_nav-----------------------new_post_topnav------------------)\n\n[\n\n](/search?source=post_page---top_nav_layout_nav-----------------------------------------)\n\nSign up\n\n[Sign in](/m/signin?operation=login&redirect=https%3A%2F%2Fmedium.com%2F%40aryan.dev%2Fasynchronous-programming-in-javascript-callbacks-promises-and-async-await-19bb4e9c48db&source=post_page---top_nav_layout_nav-----------------------global_nav------------------)\n\nAsynchronous Programming in JavaScript: A Friendly Guide\n========================================================\n\n[\n\n](/@aryan.dev?source=post_page---byline--19bb4e9c48db---------------------------------------)\n\n[Aryan](/@aryan.dev?source=post_page---byline--19bb4e9c48db---------------------------------------)\n\n12 min read\n\n·\n\nSep 22, 2024\n\n[\n\n](/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Fp%2F19bb4e9c48db&operation=register&redirect=https%3A%2F%2Fmedium.com%2F%40aryan.dev%2Fasynchronous-programming-in-javascript-callbacks-promises-and-async-await-19bb4e9c48db&user=Aryan&userId=1ad507f8ea0d&source=---header_actions--19bb4e9c48db---------------------clap_footer------------------)\n\n\\--\n\n[](/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F19bb4e9c48db&operation=register&redirect=https%3A%2F%2Fmedium.com%2F%40aryan.dev%2Fasynchronous-programming-in-javascript-callbacks-promises-and-async-await-19bb4e9c48db&source=---header_actions--19bb4e9c48db---------------------bookmark_footer------------------)\n\nListen\n\nShare\n\nIn the world of modern web development, asynchronous programming is essential for building smooth, responsive applications. Whether you’re fetching data from an API, handling user input, or working with timers, JavaScript’s non-blocking nature allows you to perform tasks in the background without freezing the main thread.\n\nIn this article, we’ll dive deep into the key concepts of asynchronous programming in JavaScript — **callbacks**, **promises**, and **async-await** — and show how to use them effectively to manage non-blocking operations. By the end, you’ll have a solid understanding of how to write cleaner, more efficient code that improves your application’s performance and responsiveness.\n\n1\\. Synchronous Functions in JavaScript\n=======================================\n\nAt its core, JavaScript executes code synchronously. This means that each line of code runs one after another in a single thread. While this makes code execution predictable, it can lead to performance issues if a particular task (like reading a file or making an API request) takes too long to complete.\n\nHere’s an example of how synchronous code behaves:\n\nconsole.log(\"one\");  \nconsole.log(\"two\");  \nconsole.log(\"three\");\n\nExplanation of the code:\n------------------------\n\n1.  `**console.log(\"one\")**` prints `**\"one\"**`.\n2.  `**console.log(\"two\")**` prints `**\"two\"**`.\n3.  `**console.log(\"three\")**` prints `**\"three\"**`.\n\nSince these are synchronous operations, they are executed one after the other in the exact order they appear in the code.\n\n**Output:**\n-----------\n\nWhile this works fine for simple operations, synchronous code can lead to performance bottlenecks. Imagine if one of these lines took several seconds to execute, it would block the entire program, making your application unresponsive to users. This is where asynchronous programming comes in handy.\n\n2\\. Asynchronous Functions in JavaScript\n========================================\n\nAsynchronous code allows tasks to happen in the background, enabling the rest of the code to continue executing without waiting for the task to finish. This makes JavaScript highly efficient when handling operations like **network requests**, **timers**, or **file reading**.\n\nA basic example of asynchronous behavior in JavaScript is the `setTimeout` function, which delays the execution of a function by a specified amount of time.\n\nExample:\n--------\n\nfunction hello() {  \n  console.log(\"hello\");  \n}  \n  \nsetTimeout(hello, 2000); // Executes after 2 seconds  \nsetTimeout(() => {  \n  console.log(\"Hello from ar",
                    "idx": "2-3"
                  },
                  {
                    "title": "JavaScript Async/Await: Best Practices and Examples",
                    "url": "https://codezup.com/javascript-async-await-best-practices-examples/",
                    "type": "website-preview",
                    "text": "In this comprehensive tutorial, we have explored the world of JavaScript async/await, covering its core concepts, best practices, and real-world examples. By following the steps outlined in this tutorial, you will be able to use async/await effectively in your JavaScript applications.. ",
                    "idx": "2-4"
                  },
                  {
                    "title": "Promises, async/await - The Modern JavaScript Tutorial",
                    "url": "https://javascript.info/async",
                    "type": "website-preview",
                    "text": "Promises, async/await Introduction: callbacks Promise Promises chaining Error handling with promises Promise API Promisification Microtasks Async/await Ctrl + ← Ctrl + →. \n\nEN\n\n*   [ARعربي](https://ar.javascript.info/)\n*   [ENEnglish](https://javascript.info/async)\n*   [ESEspañol](https://es.javascript.info/async)\n*   [FAفارسی](https://fa.javascript.info/async)\n*   [FRFrançais](https://fr.javascript.info/async)\n*   [IDIndonesia](https://id.javascript.info/)\n\n*   [ITItaliano](https://it.javascript.info/)\n*   [JA日本語](https://ja.javascript.info/async)\n*   [KO한국어](https://ko.javascript.info/async)\n*   [RUРусский](https://learn.javascript.ru/async)\n*   [TRTürkçe](https://tr.javascript.info/)\n*   [UKУкраїнська](https://uk.javascript.info/async)\n\n*   [ZH简体中文](https://zh.javascript.info/async)\n\nWe want to make this open-source project available for people all around the world.\n\n[Help to translate](https://javascript.info/translate) the content of this tutorial to your language!\n\n[](/)\n\n[BuyEPUB/PDF](/ebook)\n\nSearch\n\nSearch\n\n[Tutorial map](/tutorial/map)\n\nLight themeDark theme\n\nShare[](https://twitter.com/share?url=https%3A%2F%2Fjavascript.info%2Fasync)[](https://www.facebook.com/sharer/sharer.php?s=100&p%5Burl%5D=https%3A%2F%2Fjavascript.info%2Fasync)\n\nعربيEnglishEspañolفارسیFrançaisIndonesiaItaliano日本語한국어РусскийTürkçeУкраїнська简体中文\n\n1.  [Tutorial](/)\n2.  [The JavaScript language](/js)\n\nPromises, async/await\n=====================\n\n1.  [Introduction: callbacks](/callbacks)\n2.  [Promise](/promise-basics)\n3.  [Promises chaining](/promise-chaining)\n4.  [Error handling with promises](/promise-error-handling)\n5.  [Promise API](/promise-api)\n6.  [Promisification](/promisify)\n7.  [Microtasks](/microtask-queue)\n8.  [Async/await](/async-await)\n\n[Previous lesson](/custom-errors)[Next lesson](/callbacks)\n\nShare[](https://twitter.com/share?url=https%3A%2F%2Fjavascript.info%2Fasync)[](https://www.facebook.com/sharer/sharer.php?s=100&p%5Burl%5D=https%3A%2F%2Fjavascript.info%2Fasync)\n\n[Tutorial map](/tutorial/map)\n\n[](/tutorial/map)\n\n#### Sibling chapters\n\n*   [An introduction](/getting-started)\n*   [JavaScript Fundamentals](/first-steps)\n*   [Code quality](/code-quality)\n*   [Objects: the basics](/object-basics)\n*   [Data types](/data-types)\n*   [Advanced working with functions](/advanced-functions)\n*   [Object properties configuration](/object-properties)\n*   [Prototypes, inheritance](/prototypes)\n*   [Classes](/classes)\n*   [Error handling](/error-handling)\n*   [Promises, async/await](/async)\n*   [Generators, advanced iteration](/generators-iterators)\n*   [Modules](/modules)\n*   [Miscellaneous](/js-misc)\n\nShare\n\n[](https://twitter.com/share?url=https%3A%2F%2Fjavascript.info%2Fasync)[](https://www.facebook.com/sharer/sharer.php?s=100&p[url]=https%3A%2F%2Fjavascript.info%2Fasync)\n\n[Edit on GitHub](https://github.com/javascript-tutorial/en.javascript.info/blob/master/1-js/11-async)\n\n*   © 2007—2025  Ilya Kantor\n*   [about the project](/about)\n*   [contact us](/about#contact-us)\n*   [terms of usage](/terms)\n*   [privacy policy](/privacy)",
                    "idx": "2-5"
                  },
                  {
                    "title": "Mastering Asynchronous JavaScript: An Expert Guide",
                    "url": "https://expertbeacon.com/mastering-asynchronous-javascript-an-expert-guide/",
                    "type": "website-preview",
                    "text": "In this comprehensive guide, we will unpack the key aspects of async development in JavaScript: Let‘s dive in and take your async skills to the next level! Asynchronous logic enables processing of time-intensive operations without blocking overall execution.. ",
                    "idx": "2-6"
                  },
                  {
                    "title": "Mastering Asynchronous JavaScript: A Comprehensive Guide",
                    "url": "https://dev.to/codingcss/mastering-asynchronous-javascript-a-comprehensive-guide-4bh5",
                    "type": "website-preview",
                    "text": "Many newcomers to JavaScript first experience the confusion of async programming when they implement callbacks without fully understanding their asynchronous nature.. \n\n  \n\n[Skip to content](#main-content)\n\n[](/)\n\n [Powered by Algolia](https://www.algolia.com/developers/?utm_source=devto&utm_medium=referral)\n\n[Log in](https://dev.to/enter) [Create account](https://dev.to/enter?state=new-user)\n\nDEV Community\n-------------\n\nAdd reaction\n\nLike Unicorn Exploding Head Raised Hands Fire\n\nJump to Comments Save Boost\n\nModerate\n\nCopy link\n\nCopied to Clipboard\n\n[Share to X](https://twitter.com/intent/tweet?text=%22Mastering%20Asynchronous%20JavaScript%3A%20A%20Comprehensive%20Guide%22%20by%20%40codingcss%20%23DEVCommunity%20https%3A%2F%2Fdev.to%2Fcodingcss%2Fmastering-asynchronous-javascript-a-comprehensive-guide-4bh5) [Share to LinkedIn](https://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fdev.to%2Fcodingcss%2Fmastering-asynchronous-javascript-a-comprehensive-guide-4bh5&title=Mastering%20Asynchronous%20JavaScript%3A%20A%20Comprehensive%20Guide&summary=In%20our%20increasingly%20digital%20world%2C%20understanding%20core%20web%20development%20practices%20is%20essential.%20At%20the...&source=DEV%20Community) [Share to Facebook](https://www.facebook.com/sharer.php?u=https%3A%2F%2Fdev.to%2Fcodingcss%2Fmastering-asynchronous-javascript-a-comprehensive-guide-4bh5) [Share to Mastodon](https://toot.kytta.dev/?text=https%3A%2F%2Fdev.to%2Fcodingcss%2Fmastering-asynchronous-javascript-a-comprehensive-guide-4bh5)\n\n[Report Abuse](/report-abuse)\n\n[](https://media2.dev.to/dynamic/image/width=1000,height=420,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F18orm8zxkkarpmyx6nip.gif)\n\n[](/codingcss)\n\n[Danial Habib](/codingcss)\n\nPosted on Dec 9, 2023\n\nMastering Asynchronous JavaScript: A Comprehensive Guide\n========================================================\n\n[#javascript](/t/javascript) [#webdev](/t/webdev) [#programming](/t/programming) [#opensource](/t/opensource)\n\nIn our increasingly digital world, understanding core web development practices is essential. At the center of this field is 'Asynchronous JavaScript,' a pivotal player in modern web development. This detailed guide aims to demystify Async JavaScript, breaking down its complexities into digestible segments.\n\nIf you want to support my channel and see more great content, hit that subscribe button.😍  \n\n[](https://www.youtube.com/@learnwithdanial417)\n\n[](https://www.youtube.com/@learnwithdanial417)\n-----------------------------------------------\n\nWelcome to Learn with Daniel I'm Danial and on this channel, you'll find tutorials on HTML, CSS, and JavaScript, as well as creative UI/UX designs, CSS animations, and effects. Whether you're a beginner or an experienced developer, I hope you find my content helpful and enjoyable. My goal is to inspire and empower design-focused frontend developers & designers. Don't forget to subscribe to my channel and enable notifications by clicking the bell icon. That way, you'll be the first to know about new tutorials and resources as soon as they're released. #html #javascript #css #coding #frondend #htmlcss #javascriptprojects #programming #css #trend #viral #program #shortsvideo #shorts #youtubeshort\n\nyoutube.com\n\n[](https://res.cloudinary.com/practicaldev/image/fetch/s--pw1bk61i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m3tz1g8yu3xvctwegief.gif)\n\nAsynchronous Task Execution vs Blocking Synchronous Task Execution --- Generated by Author\n\n[](#introduction)Introduction\n-----------------------------\n\nStarting your exploration of Async JavaScript is akin to embarking on an adventure into the heart of contemporary web development. This programming technique has revolutionized the way web applications connect with servers, allowing data to load without interruptions, enhancing user experience and website efficiency. This guide will examine the key elements of Async JavaScript, focusing on 'callbacks,' 'promises,' and 'async/await.'\n\nWhether a novice stepping into front-end development or an experienced programmer looking to widen your coding skills, this guide is the perfect resource to understand asynchronous coding.\n\n[](#synchronous-vs-asynchronous-javascript-unraveling-the-differences)Synchronous vs. Asynchronous JavaScript: Unraveling the Differences\n-----------------------------------------------------------------------------------------------------------------------------------------\n\nBefore diving into asynchronous JavaScript, knowing the difference between synchronous and asynchronous programming in JavaScript is crucial.\n\nSynchronous programming follows a linear sequence of execution with each command processed after the completion of the previous command. While systematic, this can lead to 'blocking' when tasks pause further execution, often resulting in performance issues.\n\nContrastingly, asynchrono",
                    "idx": "2-7"
                  },
                  {
                    "title": "JavaScript Async/Await Tutorial – Master Asynchronous Programming by ...",
                    "url": "https://thelinuxcode.com/javascript-async-await-tutorial-master-asynchronous-programming-by-making-ice-cream/",
                    "type": "website-preview",
                    "text": "Async techniques power most large scale JavaScript applications today by promoting non-blocking behavior behind the scenes. This enables scalable apps which can handle high throughput without slowing down.. \n\n[Skip to content](#content \"Skip to content\")\n\n[](https://thelinuxcode.com/)\n\n[TheLinuxCode](https://thelinuxcode.com/)\n\n*   [Software](https://thelinuxcode.com/category/desktop-apps/)Menu Toggle\n    *   [Desktop Environment](https://thelinuxcode.com/category/desktop-apps/desktop-environment/)\n    *   [Instant Messenger](https://thelinuxcode.com/category/desktop-apps/instant-messenger/)\n    *   [Themes](https://thelinuxcode.com/category/desktop-apps/themes/)\n*   [Distros](https://thelinuxcode.com/category/distros/)Menu Toggle\n    *   [CentOS](https://thelinuxcode.com/category/distros/centos/)\n    *   [Debian](https://thelinuxcode.com/category/distros/debian/)\n    *   [Kali Linux](https://thelinuxcode.com/category/distros/kali-linux/)\n    *   [Red Hat](https://thelinuxcode.com/category/distros/red-hat/)\n    *   [Arch Linux](https://thelinuxcode.com/category/distros/arch-linux/)\n    *   [Ubuntu](https://thelinuxcode.com/category/distros/ubuntu/)\n    *   [Ubuntu Server](https://thelinuxcode.com/category/distros/ubuntu-server/)\n*   [SysAdmin](https://thelinuxcode.com/category/sysadmin/)Menu Toggle\n    *   [Backup](https://thelinuxcode.com/category/sysadmin/backup/)\n    *   [Firewall](https://thelinuxcode.com/category/sysadmin/firewall/)\n    *   [FTP](https://thelinuxcode.com/category/sysadmin/ftp/)\n    *   [Database](https://thelinuxcode.com/category/sysadmin/database/)\n    *   [Mail Server](https://thelinuxcode.com/category/sysadmin/mail-server/)\n*   [Security](https://thelinuxcode.com/category/sysadmin/security/)\n*   [Terminal](https://thelinuxcode.com/category/command-line/)\n\n[\n\nResidential Proxies\n\n](https://www.linuxhaxor.net/residential-proxy-pool/)[Residential Proxies](https://www.linuxhaxor.net/residential-proxy-pool/)\n\n[](https://thelinuxcode.com/)\n\n[TheLinuxCode](https://thelinuxcode.com/)\n\nMain Menu Menu\n\n*   [About Us](https://thelinuxcode.com/about/)\n*   [Contact Us](https://thelinuxcode.com/contact-us/)\n*   [Cookie Policy](https://thelinuxcode.com/cookie-policy/)\n*   [Disclaimer](https://thelinuxcode.com/disclaimer/)\n*   [Disclaimer](https://thelinuxcode.com/disclaimer-thelinuxcode/)\n*   [HomePage](https://thelinuxcode.com/homepage/)\n*   [How We Use Cookies](https://thelinuxcode.com/how-we-use-cookies/)\n*   [Privacy Policy](https://thelinuxcode.com/thelinuxcode-privacy-policy/)\n*   [Terms & Conditions](https://thelinuxcode.com/terms-conditions/)\n\nJavaScript Async/Await Tutorial – Master Asynchronous Programming by Making Ice Cream\n=====================================================================================\n\n[Leave a Comment](https://thelinuxcode.com/javascript-async-await-tutorial-master-asynchronous-programming-by-making-ice-cream/#respond) / By [Linux Code](https://thelinuxcode.com/author/linuxcode/ \"View all posts by Linux Code\") / December 10, 2024\n\nAs a senior developer with over 15 years of JavaScript experience, I can definitively say that understanding asynchronous programming is crucial for building modern, real-world applications.\n\nIn this comprehensive 4-part tutorial, you will learn:\n\n*   Foundations of synchronous and asynchronous code\n*   In-depth guide to callbacks in JavaScript\n*   How promises can overcome callback hell\n*   Why async/await is the future of asynchronous JavaScript\n\nWe will learn these concepts by building an entire ice cream ordering system from scratch! 🍦\n\nSo let‘s get started!\n\nPart 1: Synchronous vs Asynchronous Code\n----------------------------------------\n\nBefore understanding async techniques, we need to first cover the difference between synchronous and asynchronous code execution in JavaScript.\n\n### Synchronous Code in JavaScript\n\nSynchronous code executes line by line in sequential order.\n\n    console.log(\"Hello\");\n    console.log(\"World\");\n\nHere \"World\" will only log after \"Hello\" executes.\n\nThink of it like ordering food at a restaurant:\n\n1.  Sit down\n2.  View menu\n3.  Order food\n4.  Food arrives\n5.  Finish meal\n6.  Ask for bill\n7.  Pay bill\n8.  Leave\n\nEach step needs to completely finish before moving to the next one sequentially.\n\n**Benefits:** Very intuitive code flow and easy to reason about steps.\n\n**Drawbacks**: Blocking operations can halt entire application. For example – fetching data from an external API.\n\n### Asynchronous Code\n\nAsynchronous code executes out of sequence through callback functions. Callbacks act as triggers to execute logic independently.\n\nFor example:\n\n    console.log(\"Hello\"); \n    \n    setTimeout(() => {\n      console.log(\"World\");\n    }, 2000);\n    \n    console.log(\"I execute before World!\"); \n\nHere \"World\" logs asynchronously after 2 seconds while rest of code keeps running.\n\nIn a restaurant analogy:\n\n1.  Sit down\n2.  View menu\n3.  **Go to self-serve drinks counter while food is prepared**\n4.  Order food\n5. ",
                    "idx": "2-8"
                  },
                  {
                    "title": "JavaScript Promises and Async/Await: A Real-World Example",
                    "url": "https://codezup.com/javascript-promises-async-await-example/",
                    "type": "website-preview",
                    "text": "In this tutorial, we explored the core concepts, implementation guide, and best practices for using promises and async/await in JavaScript. We also covered testing and debugging techniques, and provided code examples and best practices for performance, security, and code organization.. ",
                    "idx": "2-9"
                  }
                ]
              }
            }
          ]
        },
        {
          "role": "assistant",
          "content": "Basierend auf meiner Analyse des gegebenen Newstextes über asynchrones Verhalten in JavaScript ordne ich ihn folgenden Kategorien zu:\n\n## Kategorisierung des Newstextes\n\n### **programming** - Relevanz: 9/10\nDieser Text ist hochrelevant für Programmierer, da er ein fundamentales Konzept der JavaScript-Programmierung erklärt. Das Verständnis von asynchronem Verhalten ist essentiell für jeden JavaScript-Entwickler und wird als \"einer der größten Meilensteine beim Erlernen von JavaScript\" beschrieben 【2-0】.\n\n### **ai** - Relevanz: 2/10\nNur sehr geringe Relevanz, da der Text zwar Programmierkonzepte behandelt, die in der KI-Entwicklung verwendet werden können, aber keine spezifischen AI-Themen oder -Technologien anspricht.\n\n### **work** - Relevanz: 6/10\nMittlere Relevanz für die Arbeitswelt, da asynchrone Programmierung ein wichtiges Skill für Webentwickler ist und das Verständnis dieser Konzepte die Arbeitsqualität und Effizienz in der Softwareentwicklung erheblich verbessert 【2-0】【2-1】.\n\n### **databases** - Relevanz: 4/10\nGeringe bis mittlere Relevanz, da der Text ein Beispiel mit Datenbankabfragen (`db.findUserById()`) verwendet, um asynchrones Verhalten zu demonstrieren, aber Datenbanken nicht im Fokus stehen.\n\nDie anderen Kategorien (security, data protection, copyright) sind für diesen Text nicht relevant, da er sich ausschließlich auf technische Programmierkonzepte konzentriert und keine Sicherheits-, Datenschutz- oder Urheberrechtsaspekte behandelt.",
          "id": "8f222409-06ff-4221-bb2b-aaeda82a0692"
        }
      ],
      "formattedResult": [
        [
          {
            "name": "programming",
            "relevance": 9,
            "reasoning": "Dieser Text ist hochrelevant für Programmierer, da er ein fundamentales Konzept der JavaScript-Programmierung erklärt - das asynchrone Verhalten, welches als einer der größten Meilensteine beim Erlernen von JavaScript beschrieben wird."
          },
          {
            "name": "ai",
            "relevance": 2,
            "reasoning": "Nur sehr geringe Relevanz, da der Text zwar Programmierkonzepte behandelt, die in der KI-Entwicklung verwendet werden können, aber keine spezifischen AI-Themen oder -Technologien anspricht."
          },
          {
            "name": "work",
            "relevance": 6,
            "reasoning": "Mittlere Relevanz für die Arbeitswelt, da asynchrone Programmierung ein wichtiges Skill für Webentwickler ist und das Verständnis dieser Konzepte die Arbeitsqualität und Effizienz in der Softwareentwicklung erheblich verbessert."
          },
          {
            "name": "databases",
            "relevance": 4,
            "reasoning": "Geringe bis mittlere Relevanz, da der Text ein Beispiel mit Datenbankabfragen (db.findUserById()) verwendet, um asynchrones Verhalten zu demonstrieren, aber Datenbanken nicht im Fokus stehen."
          }
        ]
      ]
    }
  }
}